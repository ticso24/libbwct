/*
 * Please do not edit this file.
 * It was generated using rpcgen++.
 */

#include <bwct/cbackup.h>
/*
 * Copyright (c) 2001,02 Bernd Walter Computer Technology
 * All rights reserved.
 *
 * $URL: https://devel.bwct.de/svn/projects/cbackup/trunk/common/cbackup.x $
 * $Date: 2002-08-15 13:58:52 +0200 (Thu, 15 Aug 2002) $
 * $Author: ticso $
 * $Rev: 56 $
 */

#include <bwct/config.h>
#include <bwct/xdr.h>

bool_t
xdr_devicetypes(register XDR *xdrs, devicetypes *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_media_label(register XDR *xdrs, media_label *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->cbckcheck))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->id))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->date))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_media_record(register XDR *xdrs, media_record *objp)
{

	if (!xdr_cbackup_u64(xdrs, &objp->recno))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->streamid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->chunkno))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_commands(register XDR *xdrs, commands *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_mediaaction(register XDR *xdrs, sc_mediaaction *objp)
{

	if (!xdr_devicetypes(xdrs, &objp->devtype))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->dev))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mid))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->medianame))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->MServer))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_restore(register XDR *xdrs, sc_restore *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->Client))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->sid))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->targetdir))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_backup(register XDR *xdrs, sc_backup *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->Client))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->Server))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->level))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->partition))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_setclient(register XDR *xdrs, sc_setclient *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->hostname))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->sserver))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_streamdb(register XDR *xdrs, sc_streamdb *objp)
{

	if (!xdr_cbackup_u64(xdrs, &objp->media_id))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mediapos))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->stream_id))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->chunkno))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_save(register XDR *xdrs, sc_save *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->server))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->sid))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_load(register XDR *xdrs, sc_load *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->server))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->sid))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_listdir(register XDR *xdrs, sc_listdir *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->partition))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_ret_failed(register XDR *xdrs, sc_ret_failed *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_ret_backup(register XDR *xdrs, sc_ret_backup *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->host))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->level))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->time))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_ret_savestat(register XDR *xdrs, sc_ret_savestat *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->length))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->streampos))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->inode))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mtime))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mtimeusec))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->ctime))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->ctimeusec))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->uid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->gid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->rdev))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->flags))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_ret_stat(register XDR *xdrs, sc_ret_stat *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->inode))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mtime))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mtimeusec))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->ctime))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->ctimeusec))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->uid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->gid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->rdev))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->flags))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_store(register XDR *xdrs, sc_store *objp)
{

	if (!xdr_cbackup_u64(xdrs, &objp->sid))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->cno))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_sc_sstore(register XDR *xdrs, sc_sstore *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->Client))
		return (FALSE);
	if (!xdr_cbackup_u64(xdrs, &objp->sid))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_command(register XDR *xdrs, command *objp)
{

	if (!xdr_commands(xdrs, &objp->cmd))
		return (FALSE);
	switch (objp->cmd) {
	case C_QUIT:
		break;
	case C_SMOUNT:
	case C_SUMOUNT:
	case C_SWRITE:
	case C_SLABEL:
	case C_MOUNT:
	case C_UMOUNT:
	case C_WRITE:
	case C_LABEL:
		if (!xdr_sc_mediaaction(xdrs, &objp->c_mediaaction))
			return (FALSE);
		break;
	case C_SSTORE:
		if (!xdr_sc_sstore(xdrs, &objp->c_sstore))
			return (FALSE);
		break;
	case C_STORE:
		if (!xdr_sc_store(xdrs, &objp->c_store))
			return (FALSE);
		break;
	case C_RESTORE:
		if (!xdr_sc_restore(xdrs, &objp->c_restore))
			return (FALSE);
		break;
	case C_BACKUP:
		if (!xdr_sc_backup(xdrs, &objp->c_backup))
			return (FALSE);
		break;
	case C_LISTBACKUPS:
		if (!xdr_cbackup_string(xdrs, &objp->Client))
			return (FALSE);
		break;
	case C_SETCLIENT:
		if (!xdr_sc_setclient(xdrs, &objp->c_setclient))
			return (FALSE);
		break;
	case C_STREAMDB:
		if (!xdr_sc_streamdb(xdrs, &objp->c_streamdb))
			return (FALSE);
		break;
	case C_LOAD:
		if (!xdr_sc_load(xdrs, &objp->c_load))
			return (FALSE);
		break;
	case C_LISTDIR:
		if (!xdr_sc_listdir(xdrs, &objp->c_listdir))
			return (FALSE);
		break;
	case C_SAVE:
		if (!xdr_sc_save(xdrs, &objp->c_save))
			return (FALSE);
		break;
	case C_RET_OK:
		break;
	case C_RET_FAILED:
		if (!xdr_sc_ret_failed(xdrs, &objp->c_ret_failed))
			return (FALSE);
		break;
	case C_RET_LABEL:
		if (!xdr_media_label(xdrs, &objp->c_ret_label))
			return (FALSE);
		break;
	case C_RET_STRING:
		if (!xdr_cbackup_string(xdrs, &objp->c_ret_string))
			return (FALSE);
		break;
	case C_RET_BACKUP:
		if (!xdr_sc_ret_backup(xdrs, &objp->c_ret_backup))
			return (FALSE);
		break;
	case C_RET_STAT:
		if (!xdr_sc_ret_stat(xdrs, &objp->c_ret_stat))
			return (FALSE);
		break;
	case C_RET_SAVESTAT:
		if (!xdr_sc_ret_savestat(xdrs, &objp->c_ret_savestat))
			return (FALSE);
		break;
	case C_LIST:
		if (!xdr_cbackup_string(xdrs, &objp->c_list))
			return (FALSE);
		break;
	case C_LIST_END:
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}
