/*
 * Please do not edit this file.
 * It was generated using rpcgen++.
 */

#include <bwct/ndmp.h>
#define ndmp_u_quad cbackup_u64
#define xdr_ndmp_u_quad xdr_cbackup_u64

bool_t
xdr_ndmp_pval(register XDR *xdrs, ndmp_pval *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->value))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_u_quad(register XDR *xdrs, ndmp_u_quad *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->high))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->low))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_addr_type(register XDR *xdrs, ndmp_addr_type *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tcp_addr_v23(register XDR *xdrs, ndmp_tcp_addr_v23 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->ip_addr))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->port))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tcp_addr_v4(register XDR *xdrs, ndmp_tcp_addr_v4 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->ip_addr))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->port))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->addr_env.addr_env_val, (u_int *) &objp->addr_env.addr_env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fc_addr_v3(register XDR *xdrs, ndmp_fc_addr_v3 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->loop_id))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_ipc_addr_v34(register XDR *xdrs, ndmp_ipc_addr_v34 *objp)
{

	if (!xdr_bytes(xdrs, (char **)&objp->comm_data.comm_data_val, (u_int *) &objp->comm_data.comm_data_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_addr_v2(register XDR *xdrs, ndmp_mover_addr_v2 *objp)
{

	if (!xdr_ndmp_addr_type(xdrs, &objp->addr_type))
		return (FALSE);
	switch (objp->addr_type) {
	case NDMP_ADDR_LOCAL:
		break;
	case NDMP_ADDR_TCP:
		if (!xdr_ndmp_tcp_addr_v23(xdrs, &objp->addr))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ndmp_addr_v3(register XDR *xdrs, ndmp_addr_v3 *objp)
{

	if (!xdr_ndmp_addr_type(xdrs, &objp->addr_type))
		return (FALSE);
	switch (objp->addr_type) {
	case NDMP_ADDR_LOCAL:
		break;
	case NDMP_ADDR_TCP:
		if (!xdr_ndmp_tcp_addr_v23(xdrs, &objp->tcp_addr))
			return (FALSE);
		break;
	case NDMP_ADDR_FC:
		if (!xdr_ndmp_fc_addr_v3(xdrs, &objp->fc_addr))
			return (FALSE);
		break;
	case NDMP_ADDR_IPC:
		if (!xdr_ndmp_ipc_addr_v34(xdrs, &objp->ipc_addr))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ndmp_addr_v4(register XDR *xdrs, ndmp_addr_v4 *objp)
{

	if (!xdr_ndmp_addr_type(xdrs, &objp->addr_type))
		return (FALSE);
	switch (objp->addr_type) {
	case NDMP_ADDR_LOCAL:
		break;
	case NDMP_ADDR_TCP:
		if (!xdr_array(xdrs, (char **)&objp->tcp_addr.tcp_addr_val, (u_int *) &objp->tcp_addr.tcp_addr_len, ~0,
			sizeof (ndmp_tcp_addr_v4), (xdrproc_t) xdr_ndmp_tcp_addr_v4))
			return (FALSE);
		break;
	case NDMP_ADDR_IPC:
		if (!xdr_ndmp_ipc_addr_v34(xdrs, &objp->ipc_addr))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ndmp_error(register XDR *xdrs, ndmp_error *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_message(register XDR *xdrs, ndmp_message *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_header_message_type(register XDR *xdrs, ndmp_header_message_type *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_header(register XDR *xdrs, ndmp_header *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->sequence))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->time_stamp))
		return (FALSE);
	if (!xdr_ndmp_header_message_type(xdrs, &objp->message_type))
		return (FALSE);
	if (!xdr_ndmp_message(xdrs, &objp->message_code))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->reply_sequence))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error_code))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_connect_open_request(register XDR *xdrs, ndmp_connect_open_request *objp)
{

	if (!xdr_cbackup_u16(xdrs, &objp->protocol_version))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_connect_open_reply(register XDR *xdrs, ndmp_connect_open_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_auth_type(register XDR *xdrs, ndmp_auth_type *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_auth_text(register XDR *xdrs, ndmp_auth_text *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->auth_id))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->auth_password))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_auth_md5(register XDR *xdrs, ndmp_auth_md5 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->auth_id))
		return (FALSE);
	if (!xdr_opaque(xdrs, objp->auth_digest, 16))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_auth_data(register XDR *xdrs, ndmp_auth_data *objp)
{

	if (!xdr_ndmp_auth_type(xdrs, &objp->auth_type))
		return (FALSE);
	switch (objp->auth_type) {
	case NDMP_AUTH_NONE:
		break;
	case NDMP_AUTH_TEXT:
		if (!xdr_ndmp_auth_text(xdrs, &objp->auth_text))
			return (FALSE);
		break;
	case NDMP_AUTH_MD5:
		if (!xdr_ndmp_auth_md5(xdrs, &objp->auth_md5))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ndmp_connect_client_auth_request(register XDR *xdrs, ndmp_connect_client_auth_request *objp)
{

	if (!xdr_ndmp_auth_data(xdrs, &objp->auth_data))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_connect_client_auth_reply(register XDR *xdrs, ndmp_connect_client_auth_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_auth_attr(register XDR *xdrs, ndmp_auth_attr *objp)
{

	if (!xdr_ndmp_auth_type(xdrs, &objp->auth_type))
		return (FALSE);
	switch (objp->auth_type) {
	case NDMP_AUTH_NONE:
		break;
	case NDMP_AUTH_TEXT:
		break;
	case NDMP_AUTH_MD5:
		if (!xdr_opaque(xdrs, objp->challenge, 64))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_ndmp_connect_server_auth_request(register XDR *xdrs, ndmp_connect_server_auth_request *objp)
{

	if (!xdr_ndmp_auth_attr(xdrs, &objp->client_attr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_connect_server_auth_reply(register XDR *xdrs, ndmp_connect_server_auth_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_auth_data(xdrs, &objp->server_result))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_host_info_reply_v2(register XDR *xdrs, ndmp_config_get_host_info_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->hostname))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->os_type))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->os_vers))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->hostid))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->auth_type.auth_type_val, (u_int *) &objp->auth_type.auth_type_len, ~0,
		sizeof (ndmp_auth_type), (xdrproc_t) xdr_ndmp_auth_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_host_info_reply_v34(register XDR *xdrs, ndmp_config_get_host_info_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->hostname))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->os_type))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->os_vers))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->hostid))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_butype_attr_request_v2(register XDR *xdrs, ndmp_config_get_butype_attr_request_v2 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_butype_attr_reply_v2(register XDR *xdrs, ndmp_config_get_butype_attr_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->attrs))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_connection_type_reply(register XDR *xdrs, ndmp_config_get_connection_type_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->addr_types.addr_types_val, (u_int *) &objp->addr_types.addr_types_len, ~0,
		sizeof (ndmp_addr_type), (xdrproc_t) xdr_ndmp_addr_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_auth_attr_request(register XDR *xdrs, ndmp_config_get_auth_attr_request *objp)
{

	if (!xdr_ndmp_auth_type(xdrs, &objp->auth_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_auth_attr_reply(register XDR *xdrs, ndmp_config_get_auth_attr_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_auth_attr(xdrs, &objp->server_attr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_butype_info_v34(register XDR *xdrs, ndmp_butype_info_v34 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->butype_name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->default_env.default_env_val, (u_int *) &objp->default_env.default_env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->attrs))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_butype_attr_reply_v34(register XDR *xdrs, ndmp_config_get_butype_attr_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->butype_info.butype_info_val, (u_int *) &objp->butype_info.butype_info_len, ~0,
		sizeof (ndmp_butype_info_v34), (xdrproc_t) xdr_ndmp_butype_info_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fs_info_v34(register XDR *xdrs, ndmp_fs_info_v34 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->unsupported))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->fs_type))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->fs_logical_device))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->fs_physical_device))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->total_size))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->used_size))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->avail_size))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->total_inodes))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->used_inodes))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->fs_env.fs_env_val, (u_int *) &objp->fs_env.fs_env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->fs_status))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_fs_info_reply_v34(register XDR *xdrs, ndmp_config_get_fs_info_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->fs_info.fs_info_val, (u_int *) &objp->fs_info.fs_info_len, ~0,
		sizeof (ndmp_fs_info_v34), (xdrproc_t) xdr_ndmp_fs_info_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_device_capability_v34(register XDR *xdrs, ndmp_device_capability_v34 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->device))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->attr))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->capability.capability_val, (u_int *) &objp->capability.capability_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_device_info_v34(register XDR *xdrs, ndmp_device_info_v34 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->model))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->caplist.caplist_val, (u_int *) &objp->caplist.caplist_len, ~0,
		sizeof (ndmp_device_capability_v34), (xdrproc_t) xdr_ndmp_device_capability_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_tape_info_reply_v34(register XDR *xdrs, ndmp_config_get_tape_info_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->tape_info.tape_info_val, (u_int *) &objp->tape_info.tape_info_len, ~0,
		sizeof (ndmp_device_info_v34), (xdrproc_t) xdr_ndmp_device_info_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_scsi_info_reply_v34(register XDR *xdrs, ndmp_config_get_scsi_info_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->scsi_info.scsi_info_val, (u_int *) &objp->scsi_info.scsi_info_len, ~0,
		sizeof (ndmp_device_info_v34), (xdrproc_t) xdr_ndmp_device_info_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_server_info_reply_v34(register XDR *xdrs, ndmp_config_get_server_info_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->vendor_name))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->product_name))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->revision_number))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->auth_type.auth_type_val, (u_int *) &objp->auth_type.auth_type_len, ~0,
		sizeof (ndmp_auth_type), (xdrproc_t) xdr_ndmp_auth_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_class_list_v4(register XDR *xdrs, ndmp_class_list_v4 *objp)
{

	if (!xdr_cbackup_u16(xdrs, &objp->ext_class_id))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->ext_version.ext_version_val, (u_int *) &objp->ext_version.ext_version_len, ~0,
		sizeof (cbackup_u16), (xdrproc_t) xdr_cbackup_u16))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_class_version_v4(register XDR *xdrs, ndmp_class_version_v4 *objp)
{

	if (!xdr_cbackup_u16(xdrs, &objp->ext_class_id))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->ext_version))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_get_ext_list_reply_v4(register XDR *xdrs, ndmp_config_get_ext_list_reply_v4 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->class_list.class_list_val, (u_int *) &objp->class_list.class_list_len, ~0,
		sizeof (ndmp_class_list_v4), (xdrproc_t) xdr_ndmp_class_list_v4))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_set_ext_list_request_v4(register XDR *xdrs, ndmp_config_set_ext_list_request_v4 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->ndmp_selected_ext.ndmp_selected_ext_val, (u_int *) &objp->ndmp_selected_ext.ndmp_selected_ext_len, ~0,
		sizeof (ndmp_class_version_v4), (xdrproc_t) xdr_ndmp_class_version_v4))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_config_set_ext_list_reply_v4(register XDR *xdrs, ndmp_config_set_ext_list_reply_v4 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_open_request(register XDR *xdrs, ndmp_scsi_open_request *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->device))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_open_reply(register XDR *xdrs, ndmp_scsi_open_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_close_reply(register XDR *xdrs, ndmp_scsi_close_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_get_state_reply(register XDR *xdrs, ndmp_scsi_get_state_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_short(xdrs, &objp->target_controller))
		return (FALSE);
	if (!xdr_short(xdrs, &objp->target_id))
		return (FALSE);
	if (!xdr_short(xdrs, &objp->target_lun))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_set_target_request_v23(register XDR *xdrs, ndmp_scsi_set_target_request_v23 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->device))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->target_controller))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->target_id))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->target_lun))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_set_target_reply_v23(register XDR *xdrs, ndmp_scsi_set_target_reply_v23 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_reset_device_reply(register XDR *xdrs, ndmp_scsi_reset_device_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_scsi_reset_bus_reply_v23(register XDR *xdrs, ndmp_scsi_reset_bus_reply_v23 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_execute_cdb_request(register XDR *xdrs, ndmp_execute_cdb_request *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->flags))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->timeout))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->datain_len))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->cdb.cdb_val, (u_int *) &objp->cdb.cdb_len, ~0))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->dataout.dataout_val, (u_int *) &objp->dataout.dataout_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_execute_cdb_reply(register XDR *xdrs, ndmp_execute_cdb_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u8(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->dataout_len))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->datain.datain_val, (u_int *) &objp->datain.datain_len, ~0))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->ext_sense.ext_sense_val, (u_int *) &objp->ext_sense.ext_sense_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_open_mode(register XDR *xdrs, ndmp_tape_open_mode *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_open_request(register XDR *xdrs, ndmp_tape_open_request *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->device))
		return (FALSE);
	if (!xdr_ndmp_tape_open_mode(xdrs, &objp->mode))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_open_reply(register XDR *xdrs, ndmp_tape_open_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_close_reply(register XDR *xdrs, ndmp_tape_close_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_get_state_reply_v2(register XDR *xdrs, ndmp_tape_get_state_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->flags))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->file_num))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->soft_errors))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->block_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->blockno))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->total_space))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->space_remain))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_get_state_reply_v3(register XDR *xdrs, ndmp_tape_get_state_reply_v3 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->invalid))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->flags))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->file_num))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->soft_errors))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->block_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->blockno))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->total_space))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->space_remain))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->partition))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_get_state_reply_v4(register XDR *xdrs, ndmp_tape_get_state_reply_v4 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->unsupported))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->flags))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->file_num))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->soft_errors))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->block_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->blockno))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->total_space))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->space_remain))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_mtio_op(register XDR *xdrs, ndmp_tape_mtio_op *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_mtio_request(register XDR *xdrs, ndmp_tape_mtio_request *objp)
{

	if (!xdr_ndmp_tape_mtio_op(xdrs, &objp->tape_op))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->count))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_mtio_reply(register XDR *xdrs, ndmp_tape_mtio_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->resid_count))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_write_request(register XDR *xdrs, ndmp_tape_write_request *objp)
{

	if (!xdr_bytes(xdrs, (char **)&objp->data_out.data_out_val, (u_int *) &objp->data_out.data_out_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_write_reply(register XDR *xdrs, ndmp_tape_write_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->count))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_read_request(register XDR *xdrs, ndmp_tape_read_request *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->count))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_read_reply(register XDR *xdrs, ndmp_tape_read_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->data_in.data_in_val, (u_int *) &objp->data_in.data_in_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_execute_cdb_request(register XDR *xdrs, ndmp_tape_execute_cdb_request *objp)
{

	if (!xdr_ndmp_execute_cdb_request(xdrs, objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_tape_execute_cdb_reply(register XDR *xdrs, ndmp_tape_execute_cdb_reply *objp)
{

	if (!xdr_ndmp_execute_cdb_reply(xdrs, objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_operation(register XDR *xdrs, ndmp_data_operation *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_state(register XDR *xdrs, ndmp_data_state *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_halt_reason(register XDR *xdrs, ndmp_data_halt_reason *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_get_state_reply_v2(register XDR *xdrs, ndmp_data_get_state_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_data_operation(xdrs, &objp->operation))
		return (FALSE);
	if (!xdr_ndmp_data_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_data_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_processed))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->est_bytes_remain))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->est_time_remain))
		return (FALSE);
	if (!xdr_ndmp_mover_addr_v2(xdrs, &objp->mover))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_get_state_reply_v3(register XDR *xdrs, ndmp_data_get_state_reply_v3 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->invalid))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_data_operation(xdrs, &objp->operation))
		return (FALSE);
	if (!xdr_ndmp_data_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_data_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_processed))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->est_bytes_remain))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->est_time_remain))
		return (FALSE);
	if (!xdr_ndmp_addr_v3(xdrs, &objp->data_connection_addr))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_get_state_reply_v4(register XDR *xdrs, ndmp_data_get_state_reply_v4 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->unsupported))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_data_operation(xdrs, &objp->operation))
		return (FALSE);
	if (!xdr_ndmp_data_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_data_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_processed))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->est_bytes_remain))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->est_time_remain))
		return (FALSE);
	if (!xdr_ndmp_addr_v4(xdrs, &objp->data_connection_addr))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->read_length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_backup_request_v2(register XDR *xdrs, ndmp_data_start_backup_request_v2 *objp)
{

	if (!xdr_ndmp_mover_addr_v2(xdrs, &objp->mover))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->bu_type))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->env.env_val, (u_int *) &objp->env.env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_backup_request_v34(register XDR *xdrs, ndmp_data_start_backup_request_v34 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->butype_name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->env.env_val, (u_int *) &objp->env.env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_backup_reply(register XDR *xdrs, ndmp_data_start_backup_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_name_v2(register XDR *xdrs, ndmp_name_v2 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->dest))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->ssid))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->fh_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_recover_request_v2(register XDR *xdrs, ndmp_data_start_recover_request_v2 *objp)
{

	if (!xdr_ndmp_mover_addr_v2(xdrs, &objp->mover))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->env.env_val, (u_int *) &objp->env.env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->nlist.nlist_val, (u_int *) &objp->nlist.nlist_len, ~0,
		sizeof (ndmp_name_v2), (xdrproc_t) xdr_ndmp_name_v2))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->bu_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_name_v34(register XDR *xdrs, ndmp_name_v34 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->original_path))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->destination_dir))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->other_name))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->node))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->fh_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_recover_request_v34(register XDR *xdrs, ndmp_data_start_recover_request_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->env.env_val, (u_int *) &objp->env.env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->nlist.nlist_val, (u_int *) &objp->nlist.nlist_len, ~0,
		sizeof (ndmp_name_v34), (xdrproc_t) xdr_ndmp_name_v34))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->butype_name))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_start_recover_reply(register XDR *xdrs, ndmp_data_start_recover_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_abort_reply(register XDR *xdrs, ndmp_data_abort_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_stop_reply(register XDR *xdrs, ndmp_data_stop_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_get_env_reply(register XDR *xdrs, ndmp_data_get_env_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->env.env_val, (u_int *) &objp->env.env_len, ~0,
		sizeof (ndmp_pval), (xdrproc_t) xdr_ndmp_pval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_listen_request_v34(register XDR *xdrs, ndmp_data_listen_request_v34 *objp)
{

	if (!xdr_ndmp_addr_type(xdrs, &objp->addr_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_listen_reply_v3(register XDR *xdrs, ndmp_data_listen_reply_v3 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_addr_v3(xdrs, &objp->connect_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_listen_reply_v4(register XDR *xdrs, ndmp_data_listen_reply_v4 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_addr_v4(xdrs, &objp->connect_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_connect_request_v3(register XDR *xdrs, ndmp_data_connect_request_v3 *objp)
{

	if (!xdr_ndmp_addr_v3(xdrs, &objp->addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_connect_request_v4(register XDR *xdrs, ndmp_data_connect_request_v4 *objp)
{

	if (!xdr_ndmp_addr_v4(xdrs, &objp->addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_data_connect_reply_v34(register XDR *xdrs, ndmp_data_connect_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_state(register XDR *xdrs, ndmp_mover_state *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_pause_reason(register XDR *xdrs, ndmp_mover_pause_reason *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_halt_reason(register XDR *xdrs, ndmp_mover_halt_reason *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_mode(register XDR *xdrs, ndmp_mover_mode *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_get_state_reply_v2(register XDR *xdrs, ndmp_mover_get_state_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_mover_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_mover_pause_reason(xdrs, &objp->pause_reason))
		return (FALSE);
	if (!xdr_ndmp_mover_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_num))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->data_written))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->seek_position))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_left_to_read))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_get_state_reply_v3(register XDR *xdrs, ndmp_mover_get_state_reply_v3 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_mover_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_mover_pause_reason(xdrs, &objp->pause_reason))
		return (FALSE);
	if (!xdr_ndmp_mover_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_num))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->data_written))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->seek_position))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_left_to_read))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_length))
		return (FALSE);
	if (!xdr_ndmp_addr_v3(xdrs, &objp->data_connection_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_get_state_reply_v4(register XDR *xdrs, ndmp_mover_get_state_reply_v4 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_mover_mode(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_ndmp_mover_state(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_ndmp_mover_pause_reason(xdrs, &objp->pause_reason))
		return (FALSE);
	if (!xdr_ndmp_mover_halt_reason(xdrs, &objp->halt_reason))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->record_num))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_moved))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->seek_position))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->bytes_left_to_read))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->window_length))
		return (FALSE);
	if (!xdr_ndmp_addr_v4(xdrs, &objp->data_connection_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_listen_request(register XDR *xdrs, ndmp_mover_listen_request *objp)
{

	if (!xdr_ndmp_mover_mode(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_ndmp_addr_type(xdrs, &objp->addr_type))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_listen_reply_v2(register XDR *xdrs, ndmp_mover_listen_reply_v2 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_mover_addr_v2(xdrs, &objp->mover))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_listen_reply_v3(register XDR *xdrs, ndmp_mover_listen_reply_v3 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_addr_v3(xdrs, &objp->data_connection_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_listen_reply_v4(register XDR *xdrs, ndmp_mover_listen_reply_v4 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	if (!xdr_ndmp_addr_v4(xdrs, &objp->connect_addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_continue_reply(register XDR *xdrs, ndmp_mover_continue_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_abort_reply(register XDR *xdrs, ndmp_mover_abort_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_stop_reply(register XDR *xdrs, ndmp_mover_stop_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_set_window_request(register XDR *xdrs, ndmp_mover_set_window_request *objp)
{

	if (!xdr_ndmp_u_quad(xdrs, &objp->offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_set_window_reply(register XDR *xdrs, ndmp_mover_set_window_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_read_request(register XDR *xdrs, ndmp_mover_read_request *objp)
{

	if (!xdr_ndmp_u_quad(xdrs, &objp->offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_read_reply(register XDR *xdrs, ndmp_mover_read_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_close_reply(register XDR *xdrs, ndmp_mover_close_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_set_record_size_request(register XDR *xdrs, ndmp_mover_set_record_size_request *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->len))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_set_record_size_reply(register XDR *xdrs, ndmp_mover_set_record_size_reply *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_connect_request_v3(register XDR *xdrs, ndmp_mover_connect_request_v3 *objp)
{

	if (!xdr_ndmp_mover_mode(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_ndmp_addr_v3(xdrs, &objp->addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_connect_request_v4(register XDR *xdrs, ndmp_mover_connect_request_v4 *objp)
{

	if (!xdr_ndmp_mover_mode(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_ndmp_addr_v4(xdrs, &objp->addr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_mover_connect_reply_v34(register XDR *xdrs, ndmp_mover_connect_reply_v34 *objp)
{

	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_data_halted_request_v23(register XDR *xdrs, ndmp_notify_data_halted_request_v23 *objp)
{

	if (!xdr_ndmp_data_halt_reason(xdrs, &objp->reason))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->text_reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_data_halted_post_v4(register XDR *xdrs, ndmp_notify_data_halted_post_v4 *objp)
{

	if (!xdr_ndmp_data_halt_reason(xdrs, &objp->reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_connection_status_reason(register XDR *xdrs, ndmp_connection_status_reason *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_connection_status_post(register XDR *xdrs, ndmp_notify_connection_status_post *objp)
{

	if (!xdr_ndmp_connection_status_reason(xdrs, &objp->reason))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->protocol_version))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->text_reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_mover_halted_request_v23(register XDR *xdrs, ndmp_notify_mover_halted_request_v23 *objp)
{

	if (!xdr_ndmp_mover_halt_reason(xdrs, &objp->reason))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->text_reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_mover_halted_post_v4(register XDR *xdrs, ndmp_notify_mover_halted_post_v4 *objp)
{

	if (!xdr_ndmp_mover_halt_reason(xdrs, &objp->reason))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_mover_paused_post(register XDR *xdrs, ndmp_notify_mover_paused_post *objp)
{

	if (!xdr_ndmp_mover_pause_reason(xdrs, &objp->reason))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->seek_position))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_notify_data_read_post(register XDR *xdrs, ndmp_notify_data_read_post *objp)
{

	if (!xdr_ndmp_u_quad(xdrs, &objp->offset))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->length))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_log_request_v2(register XDR *xdrs, ndmp_log_log_request_v2 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->entry))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_debug_level_v2(register XDR *xdrs, ndmp_debug_level_v2 *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_debug_request_v2(register XDR *xdrs, ndmp_log_debug_request_v2 *objp)
{

	if (!xdr_ndmp_debug_level_v2(xdrs, &objp->level))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->message))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_type_v34(register XDR *xdrs, ndmp_log_type_v34 *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_message_request_v3(register XDR *xdrs, ndmp_log_message_request_v3 *objp)
{

	if (!xdr_ndmp_log_type_v34(xdrs, &objp->log_type))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->message_id))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->entry))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_has_associated_message_v4(register XDR *xdrs, ndmp_has_associated_message_v4 *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_message_post_v4(register XDR *xdrs, ndmp_log_message_post_v4 *objp)
{

	if (!xdr_ndmp_log_type_v34(xdrs, &objp->log_type))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->message_id))
		return (FALSE);
	if (!xdr_cbackup_string(xdrs, &objp->entry))
		return (FALSE);
	if (!xdr_ndmp_has_associated_message_v4(xdrs, &objp->associated_message_valid))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->associated_message_sequence))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_file_request_v2(register XDR *xdrs, ndmp_log_file_request_v2 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_u16(xdrs, &objp->ssid))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_file_request_v3(register XDR *xdrs, ndmp_log_file_request_v3 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_ndmp_error(xdrs, &objp->error))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_recovery_status_v4(register XDR *xdrs, ndmp_recovery_status_v4 *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_log_file_post_v4(register XDR *xdrs, ndmp_log_file_post_v4 *objp)
{

	if (!xdr_cbackup_string(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_ndmp_recovery_status_v4(xdrs, &objp->recovery_status))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_file_type(register XDR *xdrs, ndmp_file_type *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_unix_path(register XDR *xdrs, ndmp_unix_path *objp)
{

	if (!xdr_cbackup_string(xdrs, objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_unix_file_stat_v2(register XDR *xdrs, ndmp_unix_file_stat_v2 *objp)
{

	if (!xdr_ndmp_file_type(xdrs, &objp->ftype))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->mtime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->atime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->ctime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->uid))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->gid))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->mode))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->fh_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_unix_path_v2(register XDR *xdrs, ndmp_fh_unix_path_v2 *objp)
{

	if (!xdr_ndmp_unix_path(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_ndmp_unix_file_stat_v2(xdrs, &objp->fstat))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_unix_path_request_v2(register XDR *xdrs, ndmp_fh_add_unix_path_request_v2 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->paths.paths_val, (u_int *) &objp->paths.paths_len, ~0,
		sizeof (ndmp_fh_unix_path_v2), (xdrproc_t) xdr_ndmp_fh_unix_path_v2))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_unix_dir_v2(register XDR *xdrs, ndmp_fh_unix_dir_v2 *objp)
{

	if (!xdr_ndmp_unix_path(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->node))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->parent))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_unix_dir_request_v2(register XDR *xdrs, ndmp_fh_add_unix_dir_request_v2 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->dirs.dirs_val, (u_int *) &objp->dirs.dirs_len, ~0,
		sizeof (ndmp_fh_unix_dir_v2), (xdrproc_t) xdr_ndmp_fh_unix_dir_v2))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_unix_node_v2(register XDR *xdrs, ndmp_fh_unix_node_v2 *objp)
{

	if (!xdr_ndmp_unix_file_stat_v2(xdrs, &objp->fstat))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->node))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_unix_node_request_v2(register XDR *xdrs, ndmp_fh_add_unix_node_request_v2 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->nodes.nodes_val, (u_int *) &objp->nodes.nodes_len, ~0,
		sizeof (ndmp_fh_unix_node_v2), (xdrproc_t) xdr_ndmp_fh_unix_node_v2))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fs_type_v34(register XDR *xdrs, ndmp_fs_type_v34 *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_path(register XDR *xdrs, ndmp_path *objp)
{

	if (!xdr_cbackup_string(xdrs, objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_nt_path_v34(register XDR *xdrs, ndmp_nt_path_v34 *objp)
{

	if (!xdr_ndmp_path(xdrs, &objp->nt_path))
		return (FALSE);
	if (!xdr_ndmp_path(xdrs, &objp->dos_path))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_file_name_v34(register XDR *xdrs, ndmp_file_name_v34 *objp)
{

	if (!xdr_ndmp_fs_type_v34(xdrs, &objp->fs_type))
		return (FALSE);
	switch (objp->fs_type) {
	case NDMP_FS_UNIX:
		if (!xdr_ndmp_path(xdrs, &objp->unix_name))
			return (FALSE);
		break;
	case NDMP_FS_NT:
		if (!xdr_ndmp_nt_path_v34(xdrs, &objp->nt_name))
			return (FALSE);
		break;
	default:
		if (!xdr_ndmp_path(xdrs, &objp->other_name))
			return (FALSE);
		break;
	}
	return (TRUE);
}

bool_t
xdr_ndmp_file_stat_v34(register XDR *xdrs, ndmp_file_stat_v34 *objp)
{

	if (!xdr_cbackup_u32(xdrs, &objp->unsupported))
		return (FALSE);
	if (!xdr_ndmp_fs_type_v34(xdrs, &objp->fs_type))
		return (FALSE);
	if (!xdr_ndmp_file_type(xdrs, &objp->ftype))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->mtime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->atime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->ctime))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->owner))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->group))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->fattr))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_cbackup_u32(xdrs, &objp->links))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_file_v34(register XDR *xdrs, ndmp_file_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->name.name_val, (u_int *) &objp->name.name_len, ~0,
		sizeof (ndmp_file_name_v34), (xdrproc_t) xdr_ndmp_file_name_v34))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->stat.stat_val, (u_int *) &objp->stat.stat_len, ~0,
		sizeof (ndmp_file_stat_v34), (xdrproc_t) xdr_ndmp_file_stat_v34))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->node))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->fh_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_file_post_v34(register XDR *xdrs, ndmp_fh_add_file_post_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->files.files_val, (u_int *) &objp->files.files_len, ~0,
		sizeof (ndmp_file_v34), (xdrproc_t) xdr_ndmp_file_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_dir_v34(register XDR *xdrs, ndmp_dir_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->name.name_val, (u_int *) &objp->name.name_len, ~0,
		sizeof (ndmp_file_name_v34), (xdrproc_t) xdr_ndmp_file_name_v34))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->node))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->parent))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_dir_post_v34(register XDR *xdrs, ndmp_fh_add_dir_post_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->dirs.dirs_val, (u_int *) &objp->dirs.dirs_len, ~0,
		sizeof (ndmp_dir_v34), (xdrproc_t) xdr_ndmp_dir_v34))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_node_v34(register XDR *xdrs, ndmp_node_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->stats.stats_val, (u_int *) &objp->stats.stats_len, ~0,
		sizeof (ndmp_file_stat_v34), (xdrproc_t) xdr_ndmp_file_stat_v34))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->node))
		return (FALSE);
	if (!xdr_ndmp_u_quad(xdrs, &objp->fh_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_ndmp_fh_add_node_post_v34(register XDR *xdrs, ndmp_fh_add_node_post_v34 *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->nodes.nodes_val, (u_int *) &objp->nodes.nodes_len, ~0,
		sizeof (ndmp_node_v34), (xdrproc_t) xdr_ndmp_node_v34))
		return (FALSE);
	return (TRUE);
}
