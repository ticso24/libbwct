/*
 * Please do not edit this file.
 * It was generated using rpcgen++.
 */

#ifndef _CBACKUP_H_RPCGEN
#define	_CBACKUP_H_RPCGEN

/*
 * Copyright (c) 2001,02 Bernd Walter Computer Technology
 * All rights reserved.
 *
 * $URL: https://devel.bwct.de/svn/projects/cbackup/trunk/common/cbackup.x $
 * $Date: 2002-08-15 13:58:52 +0200 (Thu, 15 Aug 2002) $
 * $Author: ticso $
 * $Rev: 56 $
 */

#include "config.h"
#include <common/xdr.h>

enum devicetypes {
	DT_NONE = 0,
	DT_TAPE = 1,
	DT_FILE = 2,
	DT_RAW = 3
};

class media_label {
public:
	cbackup_string cbckcheck;
	cbackup_u64 id;
	cbackup_u64 date;
	cbackup_string name;
};

class media_record {
public:
	cbackup_u64 recno;
	cbackup_u64 streamid;
	cbackup_u64 chunkno;
};

enum commands {
	C_QUIT = 0x0,
	C_SSTORE = 0x100,
	C_SMOUNT = 0x101,
	C_SUMOUNT = 0x102,
	C_SWRITE = 0x103,
	C_SLABEL = 0x104,
	C_STORE = 0x105,
	C_RESTORE = 0x200,
	C_BACKUP = 0x201,
	C_LISTBACKUPS = 0x202,
	C_MOUNT = 0x203,
	C_UMOUNT = 0x204,
	C_WRITE = 0x205,
	C_LABEL = 0x206,
	C_SETCLIENT = 0x207,
	C_STREAMDB = 0x208,
	C_LOAD = 0x300,
	C_LISTDIR = 0x301,
	C_SAVE = 0x302,
	C_RET_OK = 0x400,
	C_RET_FAILED = 0x401,
	C_RET_LABEL = 0x500,
	C_RET_STRING = 0x501,
	C_RET_BACKUP = 0x502,
	C_RET_STAT = 0x503,
	C_RET_SAVESTAT = 0x504,
	C_LIST = 0x600,
	C_LIST_END = 0x601
};

class sc_mediaaction {
public:
	enum devicetypes devtype;
	cbackup_string dev;
	cbackup_u64 mid;
	cbackup_string medianame;
	cbackup_string MServer;
};

class sc_restore {
public:
	cbackup_string Client;
	cbackup_u64 sid;
	cbackup_string targetdir;
};

class sc_backup {
public:
	cbackup_string Client;
	cbackup_string Server;
	cbackup_u32 level;
	cbackup_string partition;
};

class sc_setclient {
public:
	cbackup_string hostname;
	cbackup_u64 sserver;
};

class sc_streamdb {
public:
	cbackup_u64 media_id;
	cbackup_u64 mediapos;
	cbackup_u64 stream_id;
	cbackup_u64 chunkno;
};

class sc_save {
public:
	cbackup_string server;
	cbackup_u64 sid;
};

class sc_load {
public:
	cbackup_string server;
	cbackup_u64 sid;
};

class sc_listdir {
public:
	cbackup_string partition;
};

class sc_ret_failed {
public:
	cbackup_string reason;
};

class sc_ret_backup {
public:
	cbackup_string host;
	cbackup_u64 level;
	cbackup_u64 time;
};

class sc_ret_savestat {
public:
	cbackup_string name;
	cbackup_u64 length;
	cbackup_u64 streampos;
	cbackup_u64 inode;
	cbackup_u64 mtime;
	cbackup_u64 mtimeusec;
	cbackup_u64 ctime;
	cbackup_u64 ctimeusec;
	cbackup_u64 size;
	cbackup_u64 mode;
	cbackup_u64 uid;
	cbackup_u64 gid;
	cbackup_u64 rdev;
	cbackup_u64 flags;
};

class sc_ret_stat {
public:
	cbackup_string name;
	cbackup_u64 inode;
	cbackup_u64 mtime;
	cbackup_u64 mtimeusec;
	cbackup_u64 ctime;
	cbackup_u64 ctimeusec;
	cbackup_u64 size;
	cbackup_u64 mode;
	cbackup_u64 uid;
	cbackup_u64 gid;
	cbackup_u64 rdev;
	cbackup_u64 flags;
};

class sc_store {
public:
	cbackup_u64 sid;
	cbackup_u64 cno;
};

class sc_sstore {
public:
	cbackup_string Client;
	cbackup_u64 sid;
};

class command {
public:
	commands cmd;
	sc_mediaaction c_mediaaction;
	sc_sstore c_sstore;
	sc_store c_store;
	sc_restore c_restore;
	sc_backup c_backup;
	cbackup_string Client;
	sc_setclient c_setclient;
	sc_streamdb c_streamdb;
	sc_load c_load;
	sc_listdir c_listdir;
	sc_save c_save;
	sc_ret_failed c_ret_failed;
	media_label c_ret_label;
	cbackup_string c_ret_string;
	sc_ret_backup c_ret_backup;
	sc_ret_stat c_ret_stat;
	sc_ret_savestat c_ret_savestat;
	cbackup_string c_list;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_devicetypes(XDR *, devicetypes*);
extern  bool_t xdr_media_label(XDR *, media_label*);
extern  bool_t xdr_media_record(XDR *, media_record*);
extern  bool_t xdr_commands(XDR *, commands*);
extern  bool_t xdr_sc_mediaaction(XDR *, sc_mediaaction*);
extern  bool_t xdr_sc_restore(XDR *, sc_restore*);
extern  bool_t xdr_sc_backup(XDR *, sc_backup*);
extern  bool_t xdr_sc_setclient(XDR *, sc_setclient*);
extern  bool_t xdr_sc_streamdb(XDR *, sc_streamdb*);
extern  bool_t xdr_sc_save(XDR *, sc_save*);
extern  bool_t xdr_sc_load(XDR *, sc_load*);
extern  bool_t xdr_sc_listdir(XDR *, sc_listdir*);
extern  bool_t xdr_sc_ret_failed(XDR *, sc_ret_failed*);
extern  bool_t xdr_sc_ret_backup(XDR *, sc_ret_backup*);
extern  bool_t xdr_sc_ret_savestat(XDR *, sc_ret_savestat*);
extern  bool_t xdr_sc_ret_stat(XDR *, sc_ret_stat*);
extern  bool_t xdr_sc_store(XDR *, sc_store*);
extern  bool_t xdr_sc_sstore(XDR *, sc_sstore*);
extern  bool_t xdr_command(XDR *, command*);

#else /* K&R C */
extern bool_t xdr_devicetypes();
extern bool_t xdr_media_label();
extern bool_t xdr_media_record();
extern bool_t xdr_commands();
extern bool_t xdr_sc_mediaaction();
extern bool_t xdr_sc_restore();
extern bool_t xdr_sc_backup();
extern bool_t xdr_sc_setclient();
extern bool_t xdr_sc_streamdb();
extern bool_t xdr_sc_save();
extern bool_t xdr_sc_load();
extern bool_t xdr_sc_listdir();
extern bool_t xdr_sc_ret_failed();
extern bool_t xdr_sc_ret_backup();
extern bool_t xdr_sc_ret_savestat();
extern bool_t xdr_sc_ret_stat();
extern bool_t xdr_sc_store();
extern bool_t xdr_sc_sstore();
extern bool_t xdr_command();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CBACKUP_H_RPCGEN */
