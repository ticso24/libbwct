/*
 * Please do not edit this file.
 * It was generated using rpcgen++.
 */

#ifndef _NDMP_H_RPCGEN
#define	_NDMP_H_RPCGEN

#define	NDMPVER_V2 2
#define	NDMPVER_V3 3
#define	NDMPVER_V4 4
#define	NDMPPORT 10000
#define ndmp_u_quad cbackup_u64
#define xdr_ndmp_u_quad xdr_cbackup_u64

class ndmp_pval {
public:
	cbackup_string name;
	cbackup_string value;
};

class ndmp_u_quad {
public:
	cbackup_u32 high;
	cbackup_u32 low;
};

enum ndmp_addr_type {
	NDMP_ADDR_LOCAL = 0,
	NDMP_ADDR_TCP = 1,
	NDMP_ADDR_FC_V3 = 2,
	NDMP_ADDR_IPC_V34 = 3
};

class ndmp_tcp_addr_v23 {
public:
	cbackup_u32 ip_addr;
	cbackup_u16 port;
};

class ndmp_tcp_addr_v4 {
public:
	cbackup_u32 ip_addr;
	cbackup_u16 port;
	class {
	public: 
		u_int addr_env_len;
		ndmp_pval *addr_env_val;
	} addr_env;
};

class ndmp_fc_addr_v3 {
public:
	cbackup_u32 loop_id;
};

class ndmp_ipc_addr_v34 {
public:
	class {
	public: 
		u_int comm_data_len;
		char *comm_data_val;
	} comm_data;
};

class ndmp_mover_addr_v2 {
public:
	ndmp_addr_type addr_type;
	ndmp_tcp_addr_v23 addr;
};

class ndmp_addr_v3 {
public:
	ndmp_addr_type addr_type;
	ndmp_tcp_addr_v23 tcp_addr;
	ndmp_fc_addr_v3 fc_addr;
	ndmp_ipc_addr_v34 ipc_addr;
};

class ndmp_addr_v4 {
public:
	ndmp_addr_type addr_type;
	class {
	public: 
		u_int tcp_addr_len;
		ndmp_tcp_addr_v4 *tcp_addr_val;
	} tcp_addr;
	ndmp_ipc_addr_v34 ipc_addr;
};

enum ndmp_error {
	NDMP_NO_ERR = 0,
	NDMP_NOT_SUPPORTED_ERR = 1,
	NDMP_DEVICE_BUSY_ERR = 2,
	NDMP_DEVICE_OPENED_ERR = 3,
	NDMP_NOT_AUTHORIZED_ERR = 4,
	NDMP_PERMISSION_ERR = 5,
	NDMP_DEV_NOT_OPEN_ERR = 6,
	NDMP_IO_ERR = 7,
	NDMP_TIMEOUT_ERR = 8,
	NDMP_ILLEGAL_ARGS_ERR = 9,
	NDMP_NO_TAPE_LOADED_ERR = 10,
	NDMP_WRITE_PROTECT_ERR = 11,
	NDMP_EOF_ERR = 12,
	NDMP_EOM_ERR = 13,
	NDMP_FILE_NOT_FOUND_ERR = 14,
	NDMP_BAD_FILE_ERR = 15,
	NDMP_NO_DEVICE_ERR = 16,
	NDMP_NO_BUS_ERR = 17,
	NDMP_XDR_DECODE_ERR = 18,
	NDMP_ILLEGAL_STATE_ERR = 19,
	NDMP_UNDEFINED_ERR = 20,
	NDMP_XDR_ENCODE_ERR = 21,
	NDMP_NO_MEM_ERR = 22,
	NDMP_CONNECT_ERR_V34 = 23,
	NDMP_SEQUENCE_NUM_ERR_V4 = 24,
	NDMP_READ_IN_PROGRESS_ERR_V4 = 25,
	NDMP_PRECONDITION_ERR_V4 = 26,
	NDMP_CLASS_NOT_SUPPORTED_ERR_V4 = 27,
	NDMP_VERSION_NOT_SUPPORTED_ERR_V4 = 28,
	NDMP_EXT_DUPL_CLASSES_ERR_V4 = 29,
	NDMP_EXT_DANDN_ILLEGAL_ERR_V4 = 30
};

enum ndmp_message {
	NDMP_CONNECT_OPEN = 0x900,
	NDMP_CONNECT_CLIENT_AUTH = 0x901,
	NDMP_CONNECT_CLOSE = 0x902,
	NDMP_CONNECT_SERVER_AUTH = 0x903,
	NDMP_CONFIG_GET_HOST_INFO = 0x100,
	NDMP_CONFIG_GET_BUTYPE_ATTR_V2 = 0x101,
	NDMP_CONFIG_GET_CONNECTION_TYPE = 0x102,
	NDMP_CONFIG_GET_AUTH_ATTR = 0x103,
	NDMP_CONFIG_GET_BUTYPE_INFO_V34 = 0x104,
	NDMP_CONFIG_GET_FS_INFO_V34 = 0x105,
	NDMP_CONFIG_GET_TAPE_INFO_V34 = 0x106,
	NDMP_CONFIG_GET_SCSI_INFO_V34 = 0x107,
	NDMP_CONFIG_GET_SERVER_INFO_V34 = 0x108,
	NDMP_CONFIG_SET_EXT_LIST_V4 = 0x109,
	NDMP_CONFIG_GET_EXT_LIST_V4 = 0x10A,
	NDMP_SCSI_OPEN = 0x200,
	NDMP_SCSI_CLOSE = 0x201,
	NDMP_SCSI_GET_STATE = 0x202,
	NDMP_SCSI_SET_TARGET_V23 = 0x203,
	NDMP_SCSI_RESET_DEVICE = 0x204,
	NDMP_SCSI_RESET_BUS_V23 = 0x205,
	NDMP_SCSI_EXECUTE_CDB = 0x206,
	NDMP_TAPE_OPEN = 0x300,
	NDMP_TAPE_CLOSE = 0x301,
	NDMP_TAPE_GET_STATE = 0x302,
	NDMP_TAPE_MTIO = 0x303,
	NDMP_TAPE_WRITE = 0x304,
	NDMP_TAPE_READ = 0x305,
	NDMP_TAPE_SET_RECORD_SIZE_V1 = 0x306,
	NDMP_TAPE_EXECUTE_CDB = 0x307,
	NDMP_DATA_GET_STATE = 0x400,
	NDMP_DATA_START_BACKUP = 0x401,
	NDMP_DATA_START_RECOVER = 0x402,
	NDMP_DATA_ABORT = 0x403,
	NDMP_DATA_GET_ENV = 0x404,
	NDMP_DATA_RESVD1_V1 = 0x405,
	NDMP_DATA_RESVD2_V1 = 0x406,
	NDMP_DATA_STOP = 0x407,
	NDMP_DATA_CONTINUE_V1 = 0x408,
	NDMP_DATA_LISTEN_V34 = 0x409,
	NDMP_DATA_CONNECT_V34 = 0x40A,
	NDMP_DATA_START_RECOVER_FILEHIST_V4 = 0x40B,
	NDMP_NOTIFY_PAUSED_V1 = 0x500,
	NDMP_NOTIFY_DATA_HALTED = 0x501,
	NDMP_NOTIFY_CONNECTION_STATUS = 0x502,
	NDMP_NOTIFY_MOVER_HALTED = 0x503,
	NDMP_NOTIFY_MOVER_PAUSED = 0x504,
	NDMP_NOTIFY_DATA_READ = 0x505,
	NDMP_LOG_LOG_V2 = 0x600,
	NDMP_LOG_DEBUG_V2 = 0x601,
	NDMP_LOG_FILE = 0x602,
	NDMP_LOG_MESSAGE_V34 = 0x603,
	NDMP_FH_ADD_UNIX_PATH_V2 = 0x700,
	NDMP_FH_ADD_UNIX_DIR_V2 = 0x701,
	NDMP_FH_ADD_UNIX_NODE_V2 = 0x702,
	NDMP_FH_ADD_FILE_V34 = 0x703,
	NDMP_FH_ADD_DIR_V34 = 0x704,
	NDMP_FH_ADD_NODE_V34 = 0x705,
	NDMP_MOVER_GET_STATE = 0xA00,
	NDMP_MOVER_LISTEN = 0xA01,
	NDMP_MOVER_CONTINUE = 0xA02,
	NDMP_MOVER_ABORT = 0xA03,
	NDMP_MOVER_STOP = 0xA04,
	NDMP_MOVER_SET_WINDOW = 0xA05,
	NDMP_MOVER_READ = 0xA06,
	NDMP_MOVER_CLOSE = 0xA07,
	NDMP_MOVER_SET_RECORD_SIZE = 0xA08,
	NDMP_MOVER_CONNECT_V34 = 0xA09,
	NDMP_VENDORS_BASE_V3 = 0xf000,
	NDMP_RESERVED_BASE_V23 = 0xff00,
	NDMP_EXT_STANDARD_BASE_V4 = 0x10000,
	NDMP_EXT_PROPRIETARY_BASE_V4 = 0x20000000
};

enum ndmp_header_message_type {
	NDMP_MESSAGE_REQUEST = 0,
	NDMP_MESSAGE_REPLY = 1
};
#define	NDMP4_MESSAGE_POST NDMP_MESSAGE_REQUEST

class ndmp_header {
public:
	cbackup_u32 sequence;
	cbackup_u32 time_stamp;
	ndmp_header_message_type message_type;
	ndmp_message message_code;
	cbackup_u32 reply_sequence;
	ndmp_error error_code;
};

class ndmp_connect_open_request {
public:
	cbackup_u16 protocol_version;
};

class ndmp_connect_open_reply {
public:
	ndmp_error error;
};

enum ndmp_auth_type {
	NDMP_AUTH_NONE = 0,
	NDMP_AUTH_TEXT = 1,
	NDMP_AUTH_MD5 = 2
};

class ndmp_auth_text {
public:
	cbackup_string auth_id;
	cbackup_string auth_password;
};

class ndmp_auth_md5 {
public:
	cbackup_string auth_id;
	char auth_digest[16];
};

class ndmp_auth_data {
public:
	ndmp_auth_type auth_type;
	struct ndmp_auth_text auth_text;
	struct ndmp_auth_md5 auth_md5;
};

class ndmp_connect_client_auth_request {
public:
	ndmp_auth_data auth_data;
};

class ndmp_connect_client_auth_reply {
public:
	ndmp_error error;
};

class ndmp_auth_attr {
public:
	ndmp_auth_type auth_type;
	char challenge[64];
};

class ndmp_connect_server_auth_request {
public:
	ndmp_auth_attr client_attr;
};

class ndmp_connect_server_auth_reply {
public:
	ndmp_error error;
	ndmp_auth_data server_result;
};

class ndmp_config_get_host_info_reply_v2 {
public:
	ndmp_error error;
	cbackup_string hostname;
	cbackup_string os_type;
	cbackup_string os_vers;
	cbackup_string hostid;
	class {
	public: 
		u_int auth_type_len;
		ndmp_auth_type *auth_type_val;
	} auth_type;
};

class ndmp_config_get_host_info_reply_v34 {
public:
	ndmp_error error;
	cbackup_string hostname;
	cbackup_string os_type;
	cbackup_string os_vers;
	cbackup_string hostid;
};
#define	NDMP_NO_BACKUP_FILELIST_V2 0x0001
#define	NDMP_NO_BACKUP_FHINFO_V2 0x0002
#define	NDMP_NO_RECOVER_FILELIST_V2 0x0004
#define	NDMP_NO_RECOVER_FHINFO_V2 0x0008
#define	NDMP_NO_RECOVER_SSID_V2 0x0010
#define	NDMP_NO_RECOVER_INC_ONLY_V2 0x0020

class ndmp_config_get_butype_attr_request_v2 {
public:
	cbackup_string name;
};

class ndmp_config_get_butype_attr_reply_v2 {
public:
	ndmp_error error;
	cbackup_u32 attrs;
};

class ndmp_config_get_connection_type_reply {
public:
	ndmp_error error;
	class {
	public: 
		u_int addr_types_len;
		ndmp_addr_type *addr_types_val;
	} addr_types;
};

class ndmp_config_get_auth_attr_request {
public:
	ndmp_auth_type auth_type;
};

class ndmp_config_get_auth_attr_reply {
public:
	ndmp_error error;
	ndmp_auth_attr server_attr;
};
#define	NDMP_BUTYPE_BACKUP_FILE_HISTORY_V3 0x0001
#define	NDMP_BUTYPE_BACKUP_FILELIST_V34 0x0002
#define	NDMP_BUTYPE_RECOVER_FILELIST_V34 0x0004
#define	NDMP_BUTYPE_BACKUP_DIRECT_V34 0x0008
#define	NDMP_BUTYPE_RECOVER_DIRECT_V34 0x0010
#define	NDMP_BUTYPE_BACKUP_INCREMENTAL_V34 0x0020
#define	NDMP_BUTYPE_RECOVER_INCREMENTAL_V34 0x0040
#define	NDMP_BUTYPE_BACKUP_UTF8_V34 0x0080
#define	NDMP_BUTYPE_RECOVER_UTF8_V34 0x0100
#define	NDMP_BUTYPE_BACKUP_FH_FILE_V4 0x0200
#define	NDMP_BUTYPE_BACKUP_FH_DIR_V4 0x0400
#define	NDMP_BUTYPE_RECOVER_FILEHIST_V4 0x0800
#define	NDMP_BUTYPE_RECOVER_FH_FILE_V4 0x1000
#define	NDMP_BUTYPE_RECOVER_FH_DIR_V4 0x2000

class ndmp_butype_info_v34 {
public:
	cbackup_string butype_name;
	class {
	public: 
		u_int default_env_len;
		ndmp_pval *default_env_val;
	} default_env;
	cbackup_u32 attrs;
};

class ndmp_config_get_butype_attr_reply_v34 {
public:
	ndmp_error error;
	class {
	public: 
		u_int butype_info_len;
		ndmp_butype_info_v34 *butype_info_val;
	} butype_info;
};
#define	NDMP_FS_INFO_TOTAL_SIZE_UNS_V34 0x00000001
#define	NDMP_FS_INFO_USED_SIZE_UNS_V34 0x00000002
#define	NDMP_FS_INFO_AVAIL_SIZE_UNS_V34 0x00000004
#define	NDMP_FS_INFO_TOTAL_INODES_UNS_V34 0x00000008
#define	NDMP_FS_INFO_USED_INODES_UNS_V34 0x00000010

class ndmp_fs_info_v34 {
public:
	cbackup_u32 unsupported;
	cbackup_string fs_type;
	cbackup_string fs_logical_device;
	cbackup_string fs_physical_device;
	ndmp_u_quad total_size;
	ndmp_u_quad used_size;
	ndmp_u_quad avail_size;
	ndmp_u_quad total_inodes;
	ndmp_u_quad used_inodes;
	class {
	public: 
		u_int fs_env_len;
		ndmp_pval *fs_env_val;
	} fs_env;
	cbackup_string fs_status;
};

class ndmp_config_get_fs_info_reply_v34 {
public:
	ndmp_error error;
	class {
	public: 
		u_int fs_info_len;
		ndmp_fs_info_v34 *fs_info_val;
	} fs_info;
};
#define	NDMP_TAPE_ATTR_REWIND_V34 0x00000001
#define	NDMP_TAPE_ATTR_UNLOAD_V34 0x00000002
#define	NDMP_TAPE_ATTR_RAW_V4 0x00000004

class ndmp_device_capability_v34 {
public:
	cbackup_string device;
	cbackup_u32 attr;
	class {
	public: 
		u_int capability_len;
		ndmp_pval *capability_val;
	} capability;
};

class ndmp_device_info_v34 {
public:
	cbackup_string model;
	class {
	public: 
		u_int caplist_len;
		ndmp_device_capability_v34 *caplist_val;
	} caplist;
};

class ndmp_config_get_tape_info_reply_v34 {
public:
	ndmp_error error;
	class {
	public: 
		u_int tape_info_len;
		ndmp_device_info_v34 *tape_info_val;
	} tape_info;
};

class ndmp_config_get_scsi_info_reply_v34 {
public:
	ndmp_error error;
	class {
	public: 
		u_int scsi_info_len;
		ndmp_device_info_v34 *scsi_info_val;
	} scsi_info;
};

class ndmp_config_get_server_info_reply_v34 {
public:
	ndmp_error error;
	cbackup_string vendor_name;
	cbackup_string product_name;
	cbackup_string revision_number;
	class {
	public: 
		u_int auth_type_len;
		ndmp_auth_type *auth_type_val;
	} auth_type;
};

class ndmp_class_list_v4 {
public:
	cbackup_u16 ext_class_id;
	class {
	public: 
		u_int ext_version_len;
		cbackup_u16 *ext_version_val;
	} ext_version;
};

class ndmp_class_version_v4 {
public:
	cbackup_u16 ext_class_id;
	cbackup_u16 ext_version;
};

class ndmp_config_get_ext_list_reply_v4 {
public:
	ndmp_error error;
	class {
	public: 
		u_int class_list_len;
		ndmp_class_list_v4 *class_list_val;
	} class_list;
};

class ndmp_config_set_ext_list_request_v4 {
public:
	class {
	public: 
		u_int ndmp_selected_ext_len;
		ndmp_class_version_v4 *ndmp_selected_ext_val;
	} ndmp_selected_ext;
};

class ndmp_config_set_ext_list_reply_v4 {
public:
	ndmp_error error;
};

class ndmp_scsi_open_request {
public:
	cbackup_string device;
};

class ndmp_scsi_open_reply {
public:
	ndmp_error error;
};

class ndmp_scsi_close_reply {
public:
	ndmp_error error;
};

class ndmp_scsi_get_state_reply {
public:
	ndmp_error error;
	short target_controller;
	short target_id;
	short target_lun;
};

class ndmp_scsi_set_target_request_v23 {
public:
	cbackup_string device;
	cbackup_u16 target_controller;
	cbackup_u16 target_id;
	cbackup_u16 target_lun;
};

class ndmp_scsi_set_target_reply_v23 {
public:
	ndmp_error error;
};

class ndmp_scsi_reset_device_reply {
public:
	ndmp_error error;
};

class ndmp_scsi_reset_bus_reply_v23 {
public:
	ndmp_error error;
};
#define	NDMP_SCSI_DATA_IN 0x00000001
#define	NDMP_SCSI_DATA_OUT 0x00000002

class ndmp_execute_cdb_request {
public:
	cbackup_u32 flags;
	cbackup_u32 timeout;
	cbackup_u32 datain_len;
	class {
	public: 
		u_int cdb_len;
		char *cdb_val;
	} cdb;
	class {
	public: 
		u_int dataout_len;
		char *dataout_val;
	} dataout;
};

class ndmp_execute_cdb_reply {
public:
	ndmp_error error;
	cbackup_u8 status;
	cbackup_u32 dataout_len;
	class {
	public: 
		u_int datain_len;
		char *datain_val;
	} datain;
	class {
	public: 
		u_int ext_sense_len;
		char *ext_sense_val;
	} ext_sense;
};

enum ndmp_tape_open_mode {
	NDMP_TAPE_READ_MODE = 0,
	NDMP_TAPE_RDWR_MODE = 1,
	NDMP_TAPE_RAW_MODE_V4 = 2
};

class ndmp_tape_open_request {
public:
	cbackup_string device;
	ndmp_tape_open_mode mode;
};

class ndmp_tape_open_reply {
public:
	ndmp_error error;
};

class ndmp_tape_close_reply {
public:
	ndmp_error error;
};
#define	NDMP_TAPE_STATE_NOREWIND 0x0008
#define	NDMP_TAPE_STATE_WR_PROT 0x0010
#define	NDMP_TAPE_STATE_ERROR 0x0020
#define	NDMP_TAPE_STATE_UNLOAD 0x0040
#define	NDMP_TAPE_STATE_FILE_NUM_UNS_V34 0x00000001
#define	NDMP_TAPE_STATE_SOFT_ERRORS_UNS_V34 0x00000002
#define	NDMP_TAPE_STATE_BLOCK_SIZE_UNS_V34 0x00000004
#define	NDMP_TAPE_STATE_BLOCKNO_UNS_V34 0x00000008
#define	NDMP_TAPE_STATE_TOTAL_SPACE_UNS_V34 0x00000010
#define	NDMP_TAPE_STATE_SPACE_REMAIN_UNS_V34 0x00000020
#define	NDMP_TAPE_STATE_PARTITION_UNS_V3 0x00000040

class ndmp_tape_get_state_reply_v2 {
public:
	ndmp_error error;
	cbackup_u32 flags;
	cbackup_u32 file_num;
	cbackup_u32 soft_errors;
	cbackup_u32 block_size;
	cbackup_u32 blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
};

class ndmp_tape_get_state_reply_v3 {
public:
	cbackup_u32 invalid;
	ndmp_error error;
	cbackup_u32 flags;
	cbackup_u32 file_num;
	cbackup_u32 soft_errors;
	cbackup_u32 block_size;
	cbackup_u32 blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
	cbackup_u32 partition;
};

class ndmp_tape_get_state_reply_v4 {
public:
	cbackup_u32 unsupported;
	ndmp_error error;
	cbackup_u32 flags;
	cbackup_u32 file_num;
	cbackup_u32 soft_errors;
	cbackup_u32 block_size;
	cbackup_u32 blockno;
	ndmp_u_quad total_space;
	ndmp_u_quad space_remain;
};

enum ndmp_tape_mtio_op {
	NDMP_MTIO_FSF = 0,
	NDMP_MTIO_BSF = 1,
	NDMP_MTIO_FSR = 2,
	NDMP_MTIO_BSR = 3,
	NDMP_MTIO_REW = 4,
	NDMP_MTIO_EOF = 5,
	NDMP_MTIO_OFF = 6,
	NDMP_MTIO_TUR_V4 = 7
};

class ndmp_tape_mtio_request {
public:
	ndmp_tape_mtio_op tape_op;
	cbackup_u32 count;
};

class ndmp_tape_mtio_reply {
public:
	ndmp_error error;
	cbackup_u32 resid_count;
};

class ndmp_tape_write_request {
public:
	class {
	public: 
		u_int data_out_len;
		char *data_out_val;
	} data_out;
};

class ndmp_tape_write_reply {
public:
	ndmp_error error;
	cbackup_u32 count;
};

class ndmp_tape_read_request {
public:
	cbackup_u32 count;
};

class ndmp_tape_read_reply {
public:
	ndmp_error error;
	class {
	public: 
		u_int data_in_len;
		char *data_in_val;
	} data_in;
};

typedef ndmp_execute_cdb_request ndmp_tape_execute_cdb_request;

typedef ndmp_execute_cdb_reply ndmp_tape_execute_cdb_reply;

enum ndmp_data_operation {
	NDMP_DATA_OP_NOACTION = 0,
	NDMP_DATA_OP_BACKUP = 1,
	NDMP_DATA_OP_RECOVER = 2,
	NDMP_DATA_OP_RECOVER_FILEHIST_V4 = 3
};

enum ndmp_data_state {
	NDMP_DATA_STATE_IDLE = 0,
	NDMP_DATA_STATE_ACTIVE = 1,
	NDMP_DATA_STATE_HALTED = 2,
	NDMP_DATA_STATE_LISTEN_V34 = 3,
	NDMP_DATA_STATE_CONNECTED_V34 = 4
};

enum ndmp_data_halt_reason {
	NDMP_DATA_HALT_NA = 0,
	NDMP_DATA_HALT_SUCCESSFUL = 1,
	NDMP_DATA_HALT_ABORTED = 2,
	NDMP_DATA_HALT_INTERNAL_ERROR = 3,
	NDMP_DATA_HALT_CONNECT_ERROR = 4
};

class ndmp_data_get_state_reply_v2 {
public:
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	cbackup_u32 est_time_remain;
	ndmp_mover_addr_v2 mover;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};
#define	NDMP_DATA_STATE_EST_BYTES_REMAIN_UNS_V34 0x00000001
#define	NDMP_DATA_STATE_EST_TIME_REMAIN_UNS_V34 0x00000002

class ndmp_data_get_state_reply_v3 {
public:
	cbackup_u32 invalid;
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	cbackup_u32 est_time_remain;
	ndmp_addr_v3 data_connection_addr;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};

class ndmp_data_get_state_reply_v4 {
public:
	cbackup_u32 unsupported;
	ndmp_error error;
	ndmp_data_operation operation;
	ndmp_data_state state;
	ndmp_data_halt_reason halt_reason;
	ndmp_u_quad bytes_processed;
	ndmp_u_quad est_bytes_remain;
	cbackup_u32 est_time_remain;
	ndmp_addr_v4 data_connection_addr;
	ndmp_u_quad read_offset;
	ndmp_u_quad read_length;
};

class ndmp_data_start_backup_request_v2 {
public:
	ndmp_mover_addr_v2 mover;
	cbackup_string bu_type;
	class {
	public: 
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};

class ndmp_data_start_backup_request_v34 {
public:
	cbackup_string butype_name;
	class {
	public: 
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};

class ndmp_data_start_backup_reply {
public:
	ndmp_error error;
};

class ndmp_name_v2 {
public:
	cbackup_string name;
	cbackup_string dest;
	cbackup_u16 ssid;
	ndmp_u_quad fh_info;
};

class ndmp_data_start_recover_request_v2 {
public:
	ndmp_mover_addr_v2 mover;
	class {
	public: 
		u_int env_len;
		ndmp_pval *env_val;
	} env;
	class {
	public: 
		u_int nlist_len;
		ndmp_name_v2 *nlist_val;
	} nlist;
	cbackup_string bu_type;
};

class ndmp_name_v34 {
public:
	cbackup_string original_path;
	cbackup_string destination_dir;
	cbackup_string name;
	cbackup_string other_name;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};

class ndmp_data_start_recover_request_v34 {
public:
	class {
	public: 
		u_int env_len;
		ndmp_pval *env_val;
	} env;
	class {
	public: 
		u_int nlist_len;
		ndmp_name_v34 *nlist_val;
	} nlist;
	cbackup_string butype_name;
};

class ndmp_data_start_recover_reply {
public:
	ndmp_error error;
};

class ndmp_data_abort_reply {
public:
	ndmp_error error;
};

class ndmp_data_stop_reply {
public:
	ndmp_error error;
};

class ndmp_data_get_env_reply {
public:
	ndmp_error error;
	class {
	public: 
		u_int env_len;
		ndmp_pval *env_val;
	} env;
};

class ndmp_data_listen_request_v34 {
public:
	ndmp_addr_type addr_type;
};

class ndmp_data_listen_reply_v3 {
public:
	ndmp_error error;
	ndmp_addr_v3 connect_addr;
};

class ndmp_data_listen_reply_v4 {
public:
	ndmp_error error;
	ndmp_addr_v4 connect_addr;
};

class ndmp_data_connect_request_v3 {
public:
	ndmp_addr_v3 addr;
};

class ndmp_data_connect_request_v4 {
public:
	ndmp_addr_v4 addr;
};

class ndmp_data_connect_reply_v34 {
public:
	ndmp_error error;
};

enum ndmp_mover_state {
	NDMP_MOVER_STATE_IDLE = 0,
	NDMP_MOVER_STATE_LISTEN = 1,
	NDMP_MOVER_STATE_ACTIVE = 2,
	NDMP_MOVER_STATE_PAUSED = 3,
	NDMP_MOVER_STATE_HALTED = 4
};

enum ndmp_mover_pause_reason {
	NDMP_MOVER_PAUSE_NA = 0,
	NDMP_MOVER_PAUSE_EOM = 1,
	NDMP_MOVER_PAUSE_EOF = 2,
	NDMP_MOVER_PAUSE_SEEK = 3,
	NDMP_MOVER_PAUSE_MEDIA_ERROR_V23 = 4,
	NDMP_MOVER_PAUSED_EOW_V34 = 5
};

enum ndmp_mover_halt_reason {
	NDMP_MOVER_HALT_NA = 0,
	NDMP_MOVER_HALT_CONNECT_CLOSED = 1,
	NDMP_MOVER_HALT_ABORTED = 2,
	NDMP_MOVER_HALT_INTERNAL_ERROR = 3,
	NDMP_MOVER_HALT_CONNECT_ERROR = 4,
	NDMP_MOVER_HALT_MEDIA_ERROR_V4 = 5
};

enum ndmp_mover_mode {
	NDMP_MOVER_MODE_READ = 0,
	NDMP_MOVER_MODE_WRITE = 1,
	NDMP_MOVER_MODE_NOACTION_V4 = 2
};

class ndmp_mover_get_state_reply_v2 {
public:
	ndmp_error error;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	cbackup_u32 record_size;
	cbackup_u32 record_num;
	ndmp_u_quad data_written;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
};

class ndmp_mover_get_state_reply_v3 {
public:
	ndmp_error error;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	cbackup_u32 record_size;
	cbackup_u32 record_num;
	ndmp_u_quad data_written;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
	ndmp_addr_v3 data_connection_addr;
};

class ndmp_mover_get_state_reply_v4 {
public:
	ndmp_error error;
	ndmp_mover_mode mode;
	ndmp_mover_state state;
	ndmp_mover_pause_reason pause_reason;
	ndmp_mover_halt_reason halt_reason;
	cbackup_u32 record_size;
	cbackup_u32 record_num;
	ndmp_u_quad bytes_moved;
	ndmp_u_quad seek_position;
	ndmp_u_quad bytes_left_to_read;
	ndmp_u_quad window_offset;
	ndmp_u_quad window_length;
	ndmp_addr_v4 data_connection_addr;
};

class ndmp_mover_listen_request {
public:
	ndmp_mover_mode mode;
	ndmp_addr_type addr_type;
};

class ndmp_mover_listen_reply_v2 {
public:
	ndmp_error error;
	ndmp_mover_addr_v2 mover;
};

class ndmp_mover_listen_reply_v3 {
public:
	ndmp_error error;
	ndmp_addr_v3 data_connection_addr;
};

class ndmp_mover_listen_reply_v4 {
public:
	ndmp_error error;
	ndmp_addr_v4 connect_addr;
};

class ndmp_mover_continue_reply {
public:
	ndmp_error error;
};

class ndmp_mover_abort_reply {
public:
	ndmp_error error;
};

class ndmp_mover_stop_reply {
public:
	ndmp_error error;
};

class ndmp_mover_set_window_request {
public:
	ndmp_u_quad offset;
	ndmp_u_quad length;
};

class ndmp_mover_set_window_reply {
public:
	ndmp_error error;
};

class ndmp_mover_read_request {
public:
	ndmp_u_quad offset;
	ndmp_u_quad length;
};

class ndmp_mover_read_reply {
public:
	ndmp_error error;
};

class ndmp_mover_close_reply {
public:
	ndmp_error error;
};

class ndmp_mover_set_record_size_request {
public:
	cbackup_u32 len;
};

class ndmp_mover_set_record_size_reply {
public:
	ndmp_error error;
};

class ndmp_mover_connect_request_v3 {
public:
	ndmp_mover_mode mode;
	ndmp_addr_v3 addr;
};

class ndmp_mover_connect_request_v4 {
public:
	ndmp_mover_mode mode;
	ndmp_addr_v4 addr;
};

class ndmp_mover_connect_reply_v34 {
public:
	ndmp_error error;
};

class ndmp_notify_data_halted_request_v23 {
public:
	ndmp_data_halt_reason reason;
	cbackup_string text_reason;
};

class ndmp_notify_data_halted_post_v4 {
public:
	ndmp_data_halt_reason reason;
};

enum ndmp_connection_status_reason {
	NDMP_CONNECTED = 0,
	NDMP_SHUTDOWN = 1,
	NDMP_REFUSED = 2
};

class ndmp_notify_connection_status_post {
public:
	ndmp_connection_status_reason reason;
	cbackup_u16 protocol_version;
	cbackup_string text_reason;
};

class ndmp_notify_mover_halted_request_v23 {
public:
	ndmp_mover_halt_reason reason;
	cbackup_string text_reason;
};

class ndmp_notify_mover_halted_post_v4 {
public:
	ndmp_mover_halt_reason reason;
};

class ndmp_notify_mover_paused_post {
public:
	ndmp_mover_pause_reason reason;
	ndmp_u_quad seek_position;
};

class ndmp_notify_data_read_post {
public:
	ndmp_u_quad offset;
	ndmp_u_quad length;
};

class ndmp_log_log_request_v2 {
public:
	cbackup_string entry;
};

enum ndmp_debug_level_v2 {
	NDMP_DBG_USER_INFO_V2 = 0,
	NDMP_DBG_USER_SUMMARY_V2 = 1,
	NDMP_DBG_USER_DETAIL_V2 = 2,
	NDMP_DBG_DIAG_INFO_V2 = 3,
	NDMP_DBG_DIAG_SUMMARY_V2 = 4,
	NDMP_DBG_DIAG_DETAIL_V2 = 5,
	NDMP_DBG_PROG_INFO_V2 = 6,
	NDMP_DBG_PROG_SUMMARY_V2 = 7,
	NDMP_DBG_PROG_DETAIL_V2 = 8
};

class ndmp_log_debug_request_v2 {
public:
	ndmp_debug_level_v2 level;
	cbackup_string message;
};

enum ndmp_log_type_v34 {
	NDMP_LOG_NORMAL_V34 = 0,
	NDMP_LOG_DEBUG_V34 = 1,
	NDMP_LOG_ERROR_V34 = 2,
	NDMP_LOG_WARNING_V34 = 3
};

class ndmp_log_message_request_v3 {
public:
	ndmp_log_type_v34 log_type;
	cbackup_u32 message_id;
	cbackup_string entry;
};

enum ndmp_has_associated_message_v4 {
	NDMP_NO_ASSOCIATED_MESSAGE_V4 = 0,
	NDMP_HAS_ASSOCIATED_MESSAGE_V4 = 1
};

class ndmp_log_message_post_v4 {
public:
	ndmp_log_type_v34 log_type;
	cbackup_u32 message_id;
	cbackup_string entry;
	ndmp_has_associated_message_v4 associated_message_valid;
	cbackup_u32 associated_message_sequence;
};

class ndmp_log_file_request_v2 {
public:
	cbackup_string name;
	cbackup_u16 ssid;
	ndmp_error error;
};

class ndmp_log_file_request_v3 {
public:
	cbackup_string name;
	ndmp_error error;
};

enum ndmp_recovery_status_v4 {
	NDMP_RECOVERY_SUCCESSFUL_V4 = 0,
	NDMP_RECOVERY_FAILED_PERMISSION_V4 = 1,
	NDMP_RECOVERY_FAILED_NOT_FOUND_V4 = 2,
	NDMP_RECOVERY_FAILED_NO_DIRECTORY_V4 = 3,
	NDMP_RECOVERY_FAILED_OUT_OF_MEMORY_V4 = 4,
	NDMP_RECOVERY_FAILED_IO_ERROR_V4 = 5,
	NDMP_RECOVERY_FAILED_UNDEFINED_ERROR_V4 = 6,
	NDMP_RECOVERY_FAILED_FILE_PATH_EXISTS_V4 = 7
};

class ndmp_log_file_post_v4 {
public:
	cbackup_string name;
	ndmp_recovery_status_v4 recovery_status;
};

enum ndmp_file_type {
	NDMP_FILE_DIR = 0,
	NDMP_FILE_FIFO = 1,
	NDMP_FILE_CSPEC = 2,
	NDMP_FILE_BSPEC = 3,
	NDMP_FILE_REG = 4,
	NDMP_FILE_SLINK = 5,
	NDMP_FILE_SOCK = 6,
	NDMP_FILE_REGISTRY_V34 = 7,
	NDMP_FILE_OTHER_V34 = 8
};

typedef cbackup_string ndmp_unix_path;

class ndmp_unix_file_stat_v2 {
public:
	ndmp_file_type ftype;
	cbackup_u32 mtime;
	cbackup_u32 atime;
	cbackup_u32 ctime;
	cbackup_u32 uid;
	cbackup_u32 gid;
	cbackup_u32 mode;
	ndmp_u_quad size;
	ndmp_u_quad fh_info;
};

class ndmp_fh_unix_path_v2 {
public:
	ndmp_unix_path name;
	ndmp_unix_file_stat_v2 fstat;
};

class ndmp_fh_add_unix_path_request_v2 {
public:
	class {
	public: 
		u_int paths_len;
		ndmp_fh_unix_path_v2 *paths_val;
	} paths;
};

class ndmp_fh_unix_dir_v2 {
public:
	ndmp_unix_path name;
	cbackup_u32 node;
	cbackup_u32 parent;
};

class ndmp_fh_add_unix_dir_request_v2 {
public:
	class {
	public: 
		u_int dirs_len;
		ndmp_fh_unix_dir_v2 *dirs_val;
	} dirs;
};

class ndmp_fh_unix_node_v2 {
public:
	ndmp_unix_file_stat_v2 fstat;
	cbackup_u32 node;
};

class ndmp_fh_add_unix_node_request_v2 {
public:
	class {
	public: 
		u_int nodes_len;
		ndmp_fh_unix_node_v2 *nodes_val;
	} nodes;
};

enum ndmp_fs_type_v34 {
	NDMP_FS_UNIX = 0,
	NDMP_FS_NT = 1,
	NDMP_FS_OTHER = 2
};

typedef cbackup_string ndmp_path;

class ndmp_nt_path_v34 {
public:
	ndmp_path nt_path;
	ndmp_path dos_path;
};

class ndmp_file_name_v34 {
public:
	ndmp_fs_type_v34 fs_type;
	ndmp_path unix_name;
	ndmp_nt_path_v34 nt_name;
	ndmp_path other_name;
};
#define	NDMP_FILE_STAT_ATIME_UNS_V34 0x00000001
#define	NDMP_FILE_STAT_CTIME_UNS_V34 0x00000002
#define	NDMP_FILE_STAT_GROUP_UNS_V34 0x00000004

class ndmp_file_stat_v34 {
public:
	cbackup_u32 unsupported;
	ndmp_fs_type_v34 fs_type;
	ndmp_file_type ftype;
	cbackup_u32 mtime;
	cbackup_u32 atime;
	cbackup_u32 ctime;
	cbackup_u32 owner;
	cbackup_u32 group;
	cbackup_u32 fattr;
	ndmp_u_quad size;
	cbackup_u32 links;
};

class ndmp_file_v34 {
public:
	class {
	public: 
		u_int name_len;
		ndmp_file_name_v34 *name_val;
	} name;
	class {
	public: 
		u_int stat_len;
		ndmp_file_stat_v34 *stat_val;
	} stat;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};

class ndmp_fh_add_file_post_v34 {
public:
	class {
	public: 
		u_int files_len;
		ndmp_file_v34 *files_val;
	} files;
};

class ndmp_dir_v34 {
public:
	class {
	public: 
		u_int name_len;
		ndmp_file_name_v34 *name_val;
	} name;
	ndmp_u_quad node;
	ndmp_u_quad parent;
};

class ndmp_fh_add_dir_post_v34 {
public:
	class {
	public: 
		u_int dirs_len;
		ndmp_dir_v34 *dirs_val;
	} dirs;
};

class ndmp_node_v34 {
public:
	class {
	public: 
		u_int stats_len;
		ndmp_file_stat_v34 *stats_val;
	} stats;
	ndmp_u_quad node;
	ndmp_u_quad fh_info;
};

class ndmp_fh_add_node_post_v34 {
public:
	class {
	public: 
		u_int nodes_len;
		ndmp_node_v34 *nodes_val;
	} nodes;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ndmp_pval(XDR *, ndmp_pval*);
extern  bool_t xdr_ndmp_u_quad(XDR *, ndmp_u_quad*);
extern  bool_t xdr_ndmp_addr_type(XDR *, ndmp_addr_type*);
extern  bool_t xdr_ndmp_tcp_addr_v23(XDR *, ndmp_tcp_addr_v23*);
extern  bool_t xdr_ndmp_tcp_addr_v4(XDR *, ndmp_tcp_addr_v4*);
extern  bool_t xdr_ndmp_fc_addr_v3(XDR *, ndmp_fc_addr_v3*);
extern  bool_t xdr_ndmp_ipc_addr_v34(XDR *, ndmp_ipc_addr_v34*);
extern  bool_t xdr_ndmp_mover_addr_v2(XDR *, ndmp_mover_addr_v2*);
extern  bool_t xdr_ndmp_addr_v3(XDR *, ndmp_addr_v3*);
extern  bool_t xdr_ndmp_addr_v4(XDR *, ndmp_addr_v4*);
extern  bool_t xdr_ndmp_error(XDR *, ndmp_error*);
extern  bool_t xdr_ndmp_message(XDR *, ndmp_message*);
extern  bool_t xdr_ndmp_header_message_type(XDR *, ndmp_header_message_type*);
extern  bool_t xdr_ndmp_header(XDR *, ndmp_header*);
extern  bool_t xdr_ndmp_connect_open_request(XDR *, ndmp_connect_open_request*);
extern  bool_t xdr_ndmp_connect_open_reply(XDR *, ndmp_connect_open_reply*);
extern  bool_t xdr_ndmp_auth_type(XDR *, ndmp_auth_type*);
extern  bool_t xdr_ndmp_auth_text(XDR *, ndmp_auth_text*);
extern  bool_t xdr_ndmp_auth_md5(XDR *, ndmp_auth_md5*);
extern  bool_t xdr_ndmp_auth_data(XDR *, ndmp_auth_data*);
extern  bool_t xdr_ndmp_connect_client_auth_request(XDR *, ndmp_connect_client_auth_request*);
extern  bool_t xdr_ndmp_connect_client_auth_reply(XDR *, ndmp_connect_client_auth_reply*);
extern  bool_t xdr_ndmp_auth_attr(XDR *, ndmp_auth_attr*);
extern  bool_t xdr_ndmp_connect_server_auth_request(XDR *, ndmp_connect_server_auth_request*);
extern  bool_t xdr_ndmp_connect_server_auth_reply(XDR *, ndmp_connect_server_auth_reply*);
extern  bool_t xdr_ndmp_config_get_host_info_reply_v2(XDR *, ndmp_config_get_host_info_reply_v2*);
extern  bool_t xdr_ndmp_config_get_host_info_reply_v34(XDR *, ndmp_config_get_host_info_reply_v34*);
extern  bool_t xdr_ndmp_config_get_butype_attr_request_v2(XDR *, ndmp_config_get_butype_attr_request_v2*);
extern  bool_t xdr_ndmp_config_get_butype_attr_reply_v2(XDR *, ndmp_config_get_butype_attr_reply_v2*);
extern  bool_t xdr_ndmp_config_get_connection_type_reply(XDR *, ndmp_config_get_connection_type_reply*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request(XDR *, ndmp_config_get_auth_attr_request*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply(XDR *, ndmp_config_get_auth_attr_reply*);
extern  bool_t xdr_ndmp_butype_info_v34(XDR *, ndmp_butype_info_v34*);
extern  bool_t xdr_ndmp_config_get_butype_attr_reply_v34(XDR *, ndmp_config_get_butype_attr_reply_v34*);
extern  bool_t xdr_ndmp_fs_info_v34(XDR *, ndmp_fs_info_v34*);
extern  bool_t xdr_ndmp_config_get_fs_info_reply_v34(XDR *, ndmp_config_get_fs_info_reply_v34*);
extern  bool_t xdr_ndmp_device_capability_v34(XDR *, ndmp_device_capability_v34*);
extern  bool_t xdr_ndmp_device_info_v34(XDR *, ndmp_device_info_v34*);
extern  bool_t xdr_ndmp_config_get_tape_info_reply_v34(XDR *, ndmp_config_get_tape_info_reply_v34*);
extern  bool_t xdr_ndmp_config_get_scsi_info_reply_v34(XDR *, ndmp_config_get_scsi_info_reply_v34*);
extern  bool_t xdr_ndmp_config_get_server_info_reply_v34(XDR *, ndmp_config_get_server_info_reply_v34*);
extern  bool_t xdr_ndmp_class_list_v4(XDR *, ndmp_class_list_v4*);
extern  bool_t xdr_ndmp_class_version_v4(XDR *, ndmp_class_version_v4*);
extern  bool_t xdr_ndmp_config_get_ext_list_reply_v4(XDR *, ndmp_config_get_ext_list_reply_v4*);
extern  bool_t xdr_ndmp_config_set_ext_list_request_v4(XDR *, ndmp_config_set_ext_list_request_v4*);
extern  bool_t xdr_ndmp_config_set_ext_list_reply_v4(XDR *, ndmp_config_set_ext_list_reply_v4*);
extern  bool_t xdr_ndmp_scsi_open_request(XDR *, ndmp_scsi_open_request*);
extern  bool_t xdr_ndmp_scsi_open_reply(XDR *, ndmp_scsi_open_reply*);
extern  bool_t xdr_ndmp_scsi_close_reply(XDR *, ndmp_scsi_close_reply*);
extern  bool_t xdr_ndmp_scsi_get_state_reply(XDR *, ndmp_scsi_get_state_reply*);
extern  bool_t xdr_ndmp_scsi_set_target_request_v23(XDR *, ndmp_scsi_set_target_request_v23*);
extern  bool_t xdr_ndmp_scsi_set_target_reply_v23(XDR *, ndmp_scsi_set_target_reply_v23*);
extern  bool_t xdr_ndmp_scsi_reset_device_reply(XDR *, ndmp_scsi_reset_device_reply*);
extern  bool_t xdr_ndmp_scsi_reset_bus_reply_v23(XDR *, ndmp_scsi_reset_bus_reply_v23*);
extern  bool_t xdr_ndmp_execute_cdb_request(XDR *, ndmp_execute_cdb_request*);
extern  bool_t xdr_ndmp_execute_cdb_reply(XDR *, ndmp_execute_cdb_reply*);
extern  bool_t xdr_ndmp_tape_open_mode(XDR *, ndmp_tape_open_mode*);
extern  bool_t xdr_ndmp_tape_open_request(XDR *, ndmp_tape_open_request*);
extern  bool_t xdr_ndmp_tape_open_reply(XDR *, ndmp_tape_open_reply*);
extern  bool_t xdr_ndmp_tape_close_reply(XDR *, ndmp_tape_close_reply*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v2(XDR *, ndmp_tape_get_state_reply_v2*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v3(XDR *, ndmp_tape_get_state_reply_v3*);
extern  bool_t xdr_ndmp_tape_get_state_reply_v4(XDR *, ndmp_tape_get_state_reply_v4*);
extern  bool_t xdr_ndmp_tape_mtio_op(XDR *, ndmp_tape_mtio_op*);
extern  bool_t xdr_ndmp_tape_mtio_request(XDR *, ndmp_tape_mtio_request*);
extern  bool_t xdr_ndmp_tape_mtio_reply(XDR *, ndmp_tape_mtio_reply*);
extern  bool_t xdr_ndmp_tape_write_request(XDR *, ndmp_tape_write_request*);
extern  bool_t xdr_ndmp_tape_write_reply(XDR *, ndmp_tape_write_reply*);
extern  bool_t xdr_ndmp_tape_read_request(XDR *, ndmp_tape_read_request*);
extern  bool_t xdr_ndmp_tape_read_reply(XDR *, ndmp_tape_read_reply*);
extern  bool_t xdr_ndmp_tape_execute_cdb_request(XDR *, ndmp_tape_execute_cdb_request*);
extern  bool_t xdr_ndmp_tape_execute_cdb_reply(XDR *, ndmp_tape_execute_cdb_reply*);
extern  bool_t xdr_ndmp_data_operation(XDR *, ndmp_data_operation*);
extern  bool_t xdr_ndmp_data_state(XDR *, ndmp_data_state*);
extern  bool_t xdr_ndmp_data_halt_reason(XDR *, ndmp_data_halt_reason*);
extern  bool_t xdr_ndmp_data_get_state_reply_v2(XDR *, ndmp_data_get_state_reply_v2*);
extern  bool_t xdr_ndmp_data_get_state_reply_v3(XDR *, ndmp_data_get_state_reply_v3*);
extern  bool_t xdr_ndmp_data_get_state_reply_v4(XDR *, ndmp_data_get_state_reply_v4*);
extern  bool_t xdr_ndmp_data_start_backup_request_v2(XDR *, ndmp_data_start_backup_request_v2*);
extern  bool_t xdr_ndmp_data_start_backup_request_v34(XDR *, ndmp_data_start_backup_request_v34*);
extern  bool_t xdr_ndmp_data_start_backup_reply(XDR *, ndmp_data_start_backup_reply*);
extern  bool_t xdr_ndmp_name_v2(XDR *, ndmp_name_v2*);
extern  bool_t xdr_ndmp_data_start_recover_request_v2(XDR *, ndmp_data_start_recover_request_v2*);
extern  bool_t xdr_ndmp_name_v34(XDR *, ndmp_name_v34*);
extern  bool_t xdr_ndmp_data_start_recover_request_v34(XDR *, ndmp_data_start_recover_request_v34*);
extern  bool_t xdr_ndmp_data_start_recover_reply(XDR *, ndmp_data_start_recover_reply*);
extern  bool_t xdr_ndmp_data_abort_reply(XDR *, ndmp_data_abort_reply*);
extern  bool_t xdr_ndmp_data_stop_reply(XDR *, ndmp_data_stop_reply*);
extern  bool_t xdr_ndmp_data_get_env_reply(XDR *, ndmp_data_get_env_reply*);
extern  bool_t xdr_ndmp_data_listen_request_v34(XDR *, ndmp_data_listen_request_v34*);
extern  bool_t xdr_ndmp_data_listen_reply_v3(XDR *, ndmp_data_listen_reply_v3*);
extern  bool_t xdr_ndmp_data_listen_reply_v4(XDR *, ndmp_data_listen_reply_v4*);
extern  bool_t xdr_ndmp_data_connect_request_v3(XDR *, ndmp_data_connect_request_v3*);
extern  bool_t xdr_ndmp_data_connect_request_v4(XDR *, ndmp_data_connect_request_v4*);
extern  bool_t xdr_ndmp_data_connect_reply_v34(XDR *, ndmp_data_connect_reply_v34*);
extern  bool_t xdr_ndmp_mover_state(XDR *, ndmp_mover_state*);
extern  bool_t xdr_ndmp_mover_pause_reason(XDR *, ndmp_mover_pause_reason*);
extern  bool_t xdr_ndmp_mover_halt_reason(XDR *, ndmp_mover_halt_reason*);
extern  bool_t xdr_ndmp_mover_mode(XDR *, ndmp_mover_mode*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v2(XDR *, ndmp_mover_get_state_reply_v2*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v3(XDR *, ndmp_mover_get_state_reply_v3*);
extern  bool_t xdr_ndmp_mover_get_state_reply_v4(XDR *, ndmp_mover_get_state_reply_v4*);
extern  bool_t xdr_ndmp_mover_listen_request(XDR *, ndmp_mover_listen_request*);
extern  bool_t xdr_ndmp_mover_listen_reply_v2(XDR *, ndmp_mover_listen_reply_v2*);
extern  bool_t xdr_ndmp_mover_listen_reply_v3(XDR *, ndmp_mover_listen_reply_v3*);
extern  bool_t xdr_ndmp_mover_listen_reply_v4(XDR *, ndmp_mover_listen_reply_v4*);
extern  bool_t xdr_ndmp_mover_continue_reply(XDR *, ndmp_mover_continue_reply*);
extern  bool_t xdr_ndmp_mover_abort_reply(XDR *, ndmp_mover_abort_reply*);
extern  bool_t xdr_ndmp_mover_stop_reply(XDR *, ndmp_mover_stop_reply*);
extern  bool_t xdr_ndmp_mover_set_window_request(XDR *, ndmp_mover_set_window_request*);
extern  bool_t xdr_ndmp_mover_set_window_reply(XDR *, ndmp_mover_set_window_reply*);
extern  bool_t xdr_ndmp_mover_read_request(XDR *, ndmp_mover_read_request*);
extern  bool_t xdr_ndmp_mover_read_reply(XDR *, ndmp_mover_read_reply*);
extern  bool_t xdr_ndmp_mover_close_reply(XDR *, ndmp_mover_close_reply*);
extern  bool_t xdr_ndmp_mover_set_record_size_request(XDR *, ndmp_mover_set_record_size_request*);
extern  bool_t xdr_ndmp_mover_set_record_size_reply(XDR *, ndmp_mover_set_record_size_reply*);
extern  bool_t xdr_ndmp_mover_connect_request_v3(XDR *, ndmp_mover_connect_request_v3*);
extern  bool_t xdr_ndmp_mover_connect_request_v4(XDR *, ndmp_mover_connect_request_v4*);
extern  bool_t xdr_ndmp_mover_connect_reply_v34(XDR *, ndmp_mover_connect_reply_v34*);
extern  bool_t xdr_ndmp_notify_data_halted_request_v23(XDR *, ndmp_notify_data_halted_request_v23*);
extern  bool_t xdr_ndmp_notify_data_halted_post_v4(XDR *, ndmp_notify_data_halted_post_v4*);
extern  bool_t xdr_ndmp_connection_status_reason(XDR *, ndmp_connection_status_reason*);
extern  bool_t xdr_ndmp_notify_connection_status_post(XDR *, ndmp_notify_connection_status_post*);
extern  bool_t xdr_ndmp_notify_mover_halted_request_v23(XDR *, ndmp_notify_mover_halted_request_v23*);
extern  bool_t xdr_ndmp_notify_mover_halted_post_v4(XDR *, ndmp_notify_mover_halted_post_v4*);
extern  bool_t xdr_ndmp_notify_mover_paused_post(XDR *, ndmp_notify_mover_paused_post*);
extern  bool_t xdr_ndmp_notify_data_read_post(XDR *, ndmp_notify_data_read_post*);
extern  bool_t xdr_ndmp_log_log_request_v2(XDR *, ndmp_log_log_request_v2*);
extern  bool_t xdr_ndmp_debug_level_v2(XDR *, ndmp_debug_level_v2*);
extern  bool_t xdr_ndmp_log_debug_request_v2(XDR *, ndmp_log_debug_request_v2*);
extern  bool_t xdr_ndmp_log_type_v34(XDR *, ndmp_log_type_v34*);
extern  bool_t xdr_ndmp_log_message_request_v3(XDR *, ndmp_log_message_request_v3*);
extern  bool_t xdr_ndmp_has_associated_message_v4(XDR *, ndmp_has_associated_message_v4*);
extern  bool_t xdr_ndmp_log_message_post_v4(XDR *, ndmp_log_message_post_v4*);
extern  bool_t xdr_ndmp_log_file_request_v2(XDR *, ndmp_log_file_request_v2*);
extern  bool_t xdr_ndmp_log_file_request_v3(XDR *, ndmp_log_file_request_v3*);
extern  bool_t xdr_ndmp_recovery_status_v4(XDR *, ndmp_recovery_status_v4*);
extern  bool_t xdr_ndmp_log_file_post_v4(XDR *, ndmp_log_file_post_v4*);
extern  bool_t xdr_ndmp_file_type(XDR *, ndmp_file_type*);
extern  bool_t xdr_ndmp_unix_path(XDR *, ndmp_unix_path*);
extern  bool_t xdr_ndmp_unix_file_stat_v2(XDR *, ndmp_unix_file_stat_v2*);
extern  bool_t xdr_ndmp_fh_unix_path_v2(XDR *, ndmp_fh_unix_path_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_path_request_v2(XDR *, ndmp_fh_add_unix_path_request_v2*);
extern  bool_t xdr_ndmp_fh_unix_dir_v2(XDR *, ndmp_fh_unix_dir_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_dir_request_v2(XDR *, ndmp_fh_add_unix_dir_request_v2*);
extern  bool_t xdr_ndmp_fh_unix_node_v2(XDR *, ndmp_fh_unix_node_v2*);
extern  bool_t xdr_ndmp_fh_add_unix_node_request_v2(XDR *, ndmp_fh_add_unix_node_request_v2*);
extern  bool_t xdr_ndmp_fs_type_v34(XDR *, ndmp_fs_type_v34*);
extern  bool_t xdr_ndmp_path(XDR *, ndmp_path*);
extern  bool_t xdr_ndmp_nt_path_v34(XDR *, ndmp_nt_path_v34*);
extern  bool_t xdr_ndmp_file_name_v34(XDR *, ndmp_file_name_v34*);
extern  bool_t xdr_ndmp_file_stat_v34(XDR *, ndmp_file_stat_v34*);
extern  bool_t xdr_ndmp_file_v34(XDR *, ndmp_file_v34*);
extern  bool_t xdr_ndmp_fh_add_file_post_v34(XDR *, ndmp_fh_add_file_post_v34*);
extern  bool_t xdr_ndmp_dir_v34(XDR *, ndmp_dir_v34*);
extern  bool_t xdr_ndmp_fh_add_dir_post_v34(XDR *, ndmp_fh_add_dir_post_v34*);
extern  bool_t xdr_ndmp_node_v34(XDR *, ndmp_node_v34*);
extern  bool_t xdr_ndmp_fh_add_node_post_v34(XDR *, ndmp_fh_add_node_post_v34*);

#else /* K&R C */
extern bool_t xdr_ndmp_pval();
extern bool_t xdr_ndmp_u_quad();
extern bool_t xdr_ndmp_addr_type();
extern bool_t xdr_ndmp_tcp_addr_v23();
extern bool_t xdr_ndmp_tcp_addr_v4();
extern bool_t xdr_ndmp_fc_addr_v3();
extern bool_t xdr_ndmp_ipc_addr_v34();
extern bool_t xdr_ndmp_mover_addr_v2();
extern bool_t xdr_ndmp_addr_v3();
extern bool_t xdr_ndmp_addr_v4();
extern bool_t xdr_ndmp_error();
extern bool_t xdr_ndmp_message();
extern bool_t xdr_ndmp_header_message_type();
extern bool_t xdr_ndmp_header();
extern bool_t xdr_ndmp_connect_open_request();
extern bool_t xdr_ndmp_connect_open_reply();
extern bool_t xdr_ndmp_auth_type();
extern bool_t xdr_ndmp_auth_text();
extern bool_t xdr_ndmp_auth_md5();
extern bool_t xdr_ndmp_auth_data();
extern bool_t xdr_ndmp_connect_client_auth_request();
extern bool_t xdr_ndmp_connect_client_auth_reply();
extern bool_t xdr_ndmp_auth_attr();
extern bool_t xdr_ndmp_connect_server_auth_request();
extern bool_t xdr_ndmp_connect_server_auth_reply();
extern bool_t xdr_ndmp_config_get_host_info_reply_v2();
extern bool_t xdr_ndmp_config_get_host_info_reply_v34();
extern bool_t xdr_ndmp_config_get_butype_attr_request_v2();
extern bool_t xdr_ndmp_config_get_butype_attr_reply_v2();
extern bool_t xdr_ndmp_config_get_connection_type_reply();
extern bool_t xdr_ndmp_config_get_auth_attr_request();
extern bool_t xdr_ndmp_config_get_auth_attr_reply();
extern bool_t xdr_ndmp_butype_info_v34();
extern bool_t xdr_ndmp_config_get_butype_attr_reply_v34();
extern bool_t xdr_ndmp_fs_info_v34();
extern bool_t xdr_ndmp_config_get_fs_info_reply_v34();
extern bool_t xdr_ndmp_device_capability_v34();
extern bool_t xdr_ndmp_device_info_v34();
extern bool_t xdr_ndmp_config_get_tape_info_reply_v34();
extern bool_t xdr_ndmp_config_get_scsi_info_reply_v34();
extern bool_t xdr_ndmp_config_get_server_info_reply_v34();
extern bool_t xdr_ndmp_class_list_v4();
extern bool_t xdr_ndmp_class_version_v4();
extern bool_t xdr_ndmp_config_get_ext_list_reply_v4();
extern bool_t xdr_ndmp_config_set_ext_list_request_v4();
extern bool_t xdr_ndmp_config_set_ext_list_reply_v4();
extern bool_t xdr_ndmp_scsi_open_request();
extern bool_t xdr_ndmp_scsi_open_reply();
extern bool_t xdr_ndmp_scsi_close_reply();
extern bool_t xdr_ndmp_scsi_get_state_reply();
extern bool_t xdr_ndmp_scsi_set_target_request_v23();
extern bool_t xdr_ndmp_scsi_set_target_reply_v23();
extern bool_t xdr_ndmp_scsi_reset_device_reply();
extern bool_t xdr_ndmp_scsi_reset_bus_reply_v23();
extern bool_t xdr_ndmp_execute_cdb_request();
extern bool_t xdr_ndmp_execute_cdb_reply();
extern bool_t xdr_ndmp_tape_open_mode();
extern bool_t xdr_ndmp_tape_open_request();
extern bool_t xdr_ndmp_tape_open_reply();
extern bool_t xdr_ndmp_tape_close_reply();
extern bool_t xdr_ndmp_tape_get_state_reply_v2();
extern bool_t xdr_ndmp_tape_get_state_reply_v3();
extern bool_t xdr_ndmp_tape_get_state_reply_v4();
extern bool_t xdr_ndmp_tape_mtio_op();
extern bool_t xdr_ndmp_tape_mtio_request();
extern bool_t xdr_ndmp_tape_mtio_reply();
extern bool_t xdr_ndmp_tape_write_request();
extern bool_t xdr_ndmp_tape_write_reply();
extern bool_t xdr_ndmp_tape_read_request();
extern bool_t xdr_ndmp_tape_read_reply();
extern bool_t xdr_ndmp_tape_execute_cdb_request();
extern bool_t xdr_ndmp_tape_execute_cdb_reply();
extern bool_t xdr_ndmp_data_operation();
extern bool_t xdr_ndmp_data_state();
extern bool_t xdr_ndmp_data_halt_reason();
extern bool_t xdr_ndmp_data_get_state_reply_v2();
extern bool_t xdr_ndmp_data_get_state_reply_v3();
extern bool_t xdr_ndmp_data_get_state_reply_v4();
extern bool_t xdr_ndmp_data_start_backup_request_v2();
extern bool_t xdr_ndmp_data_start_backup_request_v34();
extern bool_t xdr_ndmp_data_start_backup_reply();
extern bool_t xdr_ndmp_name_v2();
extern bool_t xdr_ndmp_data_start_recover_request_v2();
extern bool_t xdr_ndmp_name_v34();
extern bool_t xdr_ndmp_data_start_recover_request_v34();
extern bool_t xdr_ndmp_data_start_recover_reply();
extern bool_t xdr_ndmp_data_abort_reply();
extern bool_t xdr_ndmp_data_stop_reply();
extern bool_t xdr_ndmp_data_get_env_reply();
extern bool_t xdr_ndmp_data_listen_request_v34();
extern bool_t xdr_ndmp_data_listen_reply_v3();
extern bool_t xdr_ndmp_data_listen_reply_v4();
extern bool_t xdr_ndmp_data_connect_request_v3();
extern bool_t xdr_ndmp_data_connect_request_v4();
extern bool_t xdr_ndmp_data_connect_reply_v34();
extern bool_t xdr_ndmp_mover_state();
extern bool_t xdr_ndmp_mover_pause_reason();
extern bool_t xdr_ndmp_mover_halt_reason();
extern bool_t xdr_ndmp_mover_mode();
extern bool_t xdr_ndmp_mover_get_state_reply_v2();
extern bool_t xdr_ndmp_mover_get_state_reply_v3();
extern bool_t xdr_ndmp_mover_get_state_reply_v4();
extern bool_t xdr_ndmp_mover_listen_request();
extern bool_t xdr_ndmp_mover_listen_reply_v2();
extern bool_t xdr_ndmp_mover_listen_reply_v3();
extern bool_t xdr_ndmp_mover_listen_reply_v4();
extern bool_t xdr_ndmp_mover_continue_reply();
extern bool_t xdr_ndmp_mover_abort_reply();
extern bool_t xdr_ndmp_mover_stop_reply();
extern bool_t xdr_ndmp_mover_set_window_request();
extern bool_t xdr_ndmp_mover_set_window_reply();
extern bool_t xdr_ndmp_mover_read_request();
extern bool_t xdr_ndmp_mover_read_reply();
extern bool_t xdr_ndmp_mover_close_reply();
extern bool_t xdr_ndmp_mover_set_record_size_request();
extern bool_t xdr_ndmp_mover_set_record_size_reply();
extern bool_t xdr_ndmp_mover_connect_request_v3();
extern bool_t xdr_ndmp_mover_connect_request_v4();
extern bool_t xdr_ndmp_mover_connect_reply_v34();
extern bool_t xdr_ndmp_notify_data_halted_request_v23();
extern bool_t xdr_ndmp_notify_data_halted_post_v4();
extern bool_t xdr_ndmp_connection_status_reason();
extern bool_t xdr_ndmp_notify_connection_status_post();
extern bool_t xdr_ndmp_notify_mover_halted_request_v23();
extern bool_t xdr_ndmp_notify_mover_halted_post_v4();
extern bool_t xdr_ndmp_notify_mover_paused_post();
extern bool_t xdr_ndmp_notify_data_read_post();
extern bool_t xdr_ndmp_log_log_request_v2();
extern bool_t xdr_ndmp_debug_level_v2();
extern bool_t xdr_ndmp_log_debug_request_v2();
extern bool_t xdr_ndmp_log_type_v34();
extern bool_t xdr_ndmp_log_message_request_v3();
extern bool_t xdr_ndmp_has_associated_message_v4();
extern bool_t xdr_ndmp_log_message_post_v4();
extern bool_t xdr_ndmp_log_file_request_v2();
extern bool_t xdr_ndmp_log_file_request_v3();
extern bool_t xdr_ndmp_recovery_status_v4();
extern bool_t xdr_ndmp_log_file_post_v4();
extern bool_t xdr_ndmp_file_type();
extern bool_t xdr_ndmp_unix_path();
extern bool_t xdr_ndmp_unix_file_stat_v2();
extern bool_t xdr_ndmp_fh_unix_path_v2();
extern bool_t xdr_ndmp_fh_add_unix_path_request_v2();
extern bool_t xdr_ndmp_fh_unix_dir_v2();
extern bool_t xdr_ndmp_fh_add_unix_dir_request_v2();
extern bool_t xdr_ndmp_fh_unix_node_v2();
extern bool_t xdr_ndmp_fh_add_unix_node_request_v2();
extern bool_t xdr_ndmp_fs_type_v34();
extern bool_t xdr_ndmp_path();
extern bool_t xdr_ndmp_nt_path_v34();
extern bool_t xdr_ndmp_file_name_v34();
extern bool_t xdr_ndmp_file_stat_v34();
extern bool_t xdr_ndmp_file_v34();
extern bool_t xdr_ndmp_fh_add_file_post_v34();
extern bool_t xdr_ndmp_dir_v34();
extern bool_t xdr_ndmp_fh_add_dir_post_v34();
extern bool_t xdr_ndmp_node_v34();
extern bool_t xdr_ndmp_fh_add_node_post_v34();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NDMP_H_RPCGEN */
